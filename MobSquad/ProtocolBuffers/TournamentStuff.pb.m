// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "TournamentStuff.pb.h"

@implementation TournamentStuffRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TournamentStuffRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ChatRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface TournamentEventProto ()
@property int32_t eventId;
@property int64_t startDate;
@property int64_t endDate;
@property (retain) NSString* eventName;
@property (retain) NSMutableArray* mutableRewardsList;
@property int64_t lastShowDate;
@end

@implementation TournamentEventProto

- (BOOL) hasEventId {
  return !!hasEventId_;
}
- (void) setHasEventId:(BOOL) value {
  hasEventId_ = !!value;
}
@synthesize eventId;
- (BOOL) hasStartDate {
  return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) value {
  hasStartDate_ = !!value;
}
@synthesize startDate;
- (BOOL) hasEndDate {
  return !!hasEndDate_;
}
- (void) setHasEndDate:(BOOL) value {
  hasEndDate_ = !!value;
}
@synthesize endDate;
- (BOOL) hasEventName {
  return !!hasEventName_;
}
- (void) setHasEventName:(BOOL) value {
  hasEventName_ = !!value;
}
@synthesize eventName;
@synthesize mutableRewardsList;
- (BOOL) hasLastShowDate {
  return !!hasLastShowDate_;
}
- (void) setHasLastShowDate:(BOOL) value {
  hasLastShowDate_ = !!value;
}
@synthesize lastShowDate;
- (void) dealloc {
  self.eventName = nil;
  self.mutableRewardsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.eventId = 0;
    self.startDate = 0L;
    self.endDate = 0L;
    self.eventName = @"";
    self.lastShowDate = 0L;
  }
  return self;
}
static TournamentEventProto* defaultTournamentEventProtoInstance = nil;
+ (void) initialize {
  if (self == [TournamentEventProto class]) {
    defaultTournamentEventProtoInstance = [[TournamentEventProto alloc] init];
  }
}
+ (TournamentEventProto*) defaultInstance {
  return defaultTournamentEventProtoInstance;
}
- (TournamentEventProto*) defaultInstance {
  return defaultTournamentEventProtoInstance;
}
- (NSArray*) rewardsList {
  return mutableRewardsList;
}
- (TournamentEventRewardProto*) rewardsAtIndex:(int32_t) index {
  id value = [mutableRewardsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventId) {
    [output writeInt32:1 value:self.eventId];
  }
  if (self.hasStartDate) {
    [output writeInt64:2 value:self.startDate];
  }
  if (self.hasEndDate) {
    [output writeInt64:3 value:self.endDate];
  }
  if (self.hasEventName) {
    [output writeString:4 value:self.eventName];
  }
  for (TournamentEventRewardProto* element in self.rewardsList) {
    [output writeMessage:5 value:element];
  }
  if (self.hasLastShowDate) {
    [output writeInt64:6 value:self.lastShowDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasEventId) {
    size += computeInt32Size(1, self.eventId);
  }
  if (self.hasStartDate) {
    size += computeInt64Size(2, self.startDate);
  }
  if (self.hasEndDate) {
    size += computeInt64Size(3, self.endDate);
  }
  if (self.hasEventName) {
    size += computeStringSize(4, self.eventName);
  }
  for (TournamentEventRewardProto* element in self.rewardsList) {
    size += computeMessageSize(5, element);
  }
  if (self.hasLastShowDate) {
    size += computeInt64Size(6, self.lastShowDate);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TournamentEventProto*) parseFromData:(NSData*) data {
  return (TournamentEventProto*)[[[TournamentEventProto builder] mergeFromData:data] build];
}
+ (TournamentEventProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TournamentEventProto*)[[[TournamentEventProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TournamentEventProto*) parseFromInputStream:(NSInputStream*) input {
  return (TournamentEventProto*)[[[TournamentEventProto builder] mergeFromInputStream:input] build];
}
+ (TournamentEventProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TournamentEventProto*)[[[TournamentEventProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TournamentEventProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TournamentEventProto*)[[[TournamentEventProto builder] mergeFromCodedInputStream:input] build];
}
+ (TournamentEventProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TournamentEventProto*)[[[TournamentEventProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TournamentEventProto_Builder*) builder {
  return [[[TournamentEventProto_Builder alloc] init] autorelease];
}
+ (TournamentEventProto_Builder*) builderWithPrototype:(TournamentEventProto*) prototype {
  return [[TournamentEventProto builder] mergeFrom:prototype];
}
- (TournamentEventProto_Builder*) builder {
  return [TournamentEventProto builder];
}
@end

@interface TournamentEventProto_Builder()
@property (retain) TournamentEventProto* result;
@end

@implementation TournamentEventProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TournamentEventProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TournamentEventProto_Builder*) clear {
  self.result = [[[TournamentEventProto alloc] init] autorelease];
  return self;
}
- (TournamentEventProto_Builder*) clone {
  return [TournamentEventProto builderWithPrototype:result];
}
- (TournamentEventProto*) defaultInstance {
  return [TournamentEventProto defaultInstance];
}
- (TournamentEventProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TournamentEventProto*) buildPartial {
  TournamentEventProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TournamentEventProto_Builder*) mergeFrom:(TournamentEventProto*) other {
  if (other == [TournamentEventProto defaultInstance]) {
    return self;
  }
  if (other.hasEventId) {
    [self setEventId:other.eventId];
  }
  if (other.hasStartDate) {
    [self setStartDate:other.startDate];
  }
  if (other.hasEndDate) {
    [self setEndDate:other.endDate];
  }
  if (other.hasEventName) {
    [self setEventName:other.eventName];
  }
  if (other.mutableRewardsList.count > 0) {
    if (result.mutableRewardsList == nil) {
      result.mutableRewardsList = [NSMutableArray array];
    }
    [result.mutableRewardsList addObjectsFromArray:other.mutableRewardsList];
  }
  if (other.hasLastShowDate) {
    [self setLastShowDate:other.lastShowDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TournamentEventProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TournamentEventProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setEventId:[input readInt32]];
        break;
      }
      case 16: {
        [self setStartDate:[input readInt64]];
        break;
      }
      case 24: {
        [self setEndDate:[input readInt64]];
        break;
      }
      case 34: {
        [self setEventName:[input readString]];
        break;
      }
      case 42: {
        TournamentEventRewardProto_Builder* subBuilder = [TournamentEventRewardProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRewards:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setLastShowDate:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasEventId {
  return result.hasEventId;
}
- (int32_t) eventId {
  return result.eventId;
}
- (TournamentEventProto_Builder*) setEventId:(int32_t) value {
  result.hasEventId = YES;
  result.eventId = value;
  return self;
}
- (TournamentEventProto_Builder*) clearEventId {
  result.hasEventId = NO;
  result.eventId = 0;
  return self;
}
- (BOOL) hasStartDate {
  return result.hasStartDate;
}
- (int64_t) startDate {
  return result.startDate;
}
- (TournamentEventProto_Builder*) setStartDate:(int64_t) value {
  result.hasStartDate = YES;
  result.startDate = value;
  return self;
}
- (TournamentEventProto_Builder*) clearStartDate {
  result.hasStartDate = NO;
  result.startDate = 0L;
  return self;
}
- (BOOL) hasEndDate {
  return result.hasEndDate;
}
- (int64_t) endDate {
  return result.endDate;
}
- (TournamentEventProto_Builder*) setEndDate:(int64_t) value {
  result.hasEndDate = YES;
  result.endDate = value;
  return self;
}
- (TournamentEventProto_Builder*) clearEndDate {
  result.hasEndDate = NO;
  result.endDate = 0L;
  return self;
}
- (BOOL) hasEventName {
  return result.hasEventName;
}
- (NSString*) eventName {
  return result.eventName;
}
- (TournamentEventProto_Builder*) setEventName:(NSString*) value {
  result.hasEventName = YES;
  result.eventName = value;
  return self;
}
- (TournamentEventProto_Builder*) clearEventName {
  result.hasEventName = NO;
  result.eventName = @"";
  return self;
}
- (NSArray*) rewardsList {
  if (result.mutableRewardsList == nil) { return [NSArray array]; }
  return result.mutableRewardsList;
}
- (TournamentEventRewardProto*) rewardsAtIndex:(int32_t) index {
  return [result rewardsAtIndex:index];
}
- (TournamentEventProto_Builder*) replaceRewardsAtIndex:(int32_t) index with:(TournamentEventRewardProto*) value {
  [result.mutableRewardsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (TournamentEventProto_Builder*) addAllRewards:(NSArray*) values {
  if (result.mutableRewardsList == nil) {
    result.mutableRewardsList = [NSMutableArray array];
  }
  [result.mutableRewardsList addObjectsFromArray:values];
  return self;
}
- (TournamentEventProto_Builder*) clearRewardsList {
  result.mutableRewardsList = nil;
  return self;
}
- (TournamentEventProto_Builder*) addRewards:(TournamentEventRewardProto*) value {
  if (result.mutableRewardsList == nil) {
    result.mutableRewardsList = [NSMutableArray array];
  }
  [result.mutableRewardsList addObject:value];
  return self;
}
- (BOOL) hasLastShowDate {
  return result.hasLastShowDate;
}
- (int64_t) lastShowDate {
  return result.lastShowDate;
}
- (TournamentEventProto_Builder*) setLastShowDate:(int64_t) value {
  result.hasLastShowDate = YES;
  result.lastShowDate = value;
  return self;
}
- (TournamentEventProto_Builder*) clearLastShowDate {
  result.hasLastShowDate = NO;
  result.lastShowDate = 0L;
  return self;
}
@end

@interface TournamentEventRewardProto ()
@property int32_t tournamentEventId;
@property int32_t minRank;
@property int32_t maxRank;
@property int32_t goldRewarded;
@property (retain) NSString* backgroundImageName;
@property (retain) NSString* prizeImageName;
@property (retain) ColorProto* titleColor;
@end

@implementation TournamentEventRewardProto

- (BOOL) hasTournamentEventId {
  return !!hasTournamentEventId_;
}
- (void) setHasTournamentEventId:(BOOL) value {
  hasTournamentEventId_ = !!value;
}
@synthesize tournamentEventId;
- (BOOL) hasMinRank {
  return !!hasMinRank_;
}
- (void) setHasMinRank:(BOOL) value {
  hasMinRank_ = !!value;
}
@synthesize minRank;
- (BOOL) hasMaxRank {
  return !!hasMaxRank_;
}
- (void) setHasMaxRank:(BOOL) value {
  hasMaxRank_ = !!value;
}
@synthesize maxRank;
- (BOOL) hasGoldRewarded {
  return !!hasGoldRewarded_;
}
- (void) setHasGoldRewarded:(BOOL) value {
  hasGoldRewarded_ = !!value;
}
@synthesize goldRewarded;
- (BOOL) hasBackgroundImageName {
  return !!hasBackgroundImageName_;
}
- (void) setHasBackgroundImageName:(BOOL) value {
  hasBackgroundImageName_ = !!value;
}
@synthesize backgroundImageName;
- (BOOL) hasPrizeImageName {
  return !!hasPrizeImageName_;
}
- (void) setHasPrizeImageName:(BOOL) value {
  hasPrizeImageName_ = !!value;
}
@synthesize prizeImageName;
- (BOOL) hasTitleColor {
  return !!hasTitleColor_;
}
- (void) setHasTitleColor:(BOOL) value {
  hasTitleColor_ = !!value;
}
@synthesize titleColor;
- (void) dealloc {
  self.backgroundImageName = nil;
  self.prizeImageName = nil;
  self.titleColor = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.tournamentEventId = 0;
    self.minRank = 0;
    self.maxRank = 0;
    self.goldRewarded = 0;
    self.backgroundImageName = @"";
    self.prizeImageName = @"";
    self.titleColor = [ColorProto defaultInstance];
  }
  return self;
}
static TournamentEventRewardProto* defaultTournamentEventRewardProtoInstance = nil;
+ (void) initialize {
  if (self == [TournamentEventRewardProto class]) {
    defaultTournamentEventRewardProtoInstance = [[TournamentEventRewardProto alloc] init];
  }
}
+ (TournamentEventRewardProto*) defaultInstance {
  return defaultTournamentEventRewardProtoInstance;
}
- (TournamentEventRewardProto*) defaultInstance {
  return defaultTournamentEventRewardProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTournamentEventId) {
    [output writeInt32:1 value:self.tournamentEventId];
  }
  if (self.hasMinRank) {
    [output writeInt32:2 value:self.minRank];
  }
  if (self.hasMaxRank) {
    [output writeInt32:3 value:self.maxRank];
  }
  if (self.hasGoldRewarded) {
    [output writeInt32:4 value:self.goldRewarded];
  }
  if (self.hasBackgroundImageName) {
    [output writeString:5 value:self.backgroundImageName];
  }
  if (self.hasPrizeImageName) {
    [output writeString:6 value:self.prizeImageName];
  }
  if (self.hasTitleColor) {
    [output writeMessage:7 value:self.titleColor];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTournamentEventId) {
    size += computeInt32Size(1, self.tournamentEventId);
  }
  if (self.hasMinRank) {
    size += computeInt32Size(2, self.minRank);
  }
  if (self.hasMaxRank) {
    size += computeInt32Size(3, self.maxRank);
  }
  if (self.hasGoldRewarded) {
    size += computeInt32Size(4, self.goldRewarded);
  }
  if (self.hasBackgroundImageName) {
    size += computeStringSize(5, self.backgroundImageName);
  }
  if (self.hasPrizeImageName) {
    size += computeStringSize(6, self.prizeImageName);
  }
  if (self.hasTitleColor) {
    size += computeMessageSize(7, self.titleColor);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TournamentEventRewardProto*) parseFromData:(NSData*) data {
  return (TournamentEventRewardProto*)[[[TournamentEventRewardProto builder] mergeFromData:data] build];
}
+ (TournamentEventRewardProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TournamentEventRewardProto*)[[[TournamentEventRewardProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TournamentEventRewardProto*) parseFromInputStream:(NSInputStream*) input {
  return (TournamentEventRewardProto*)[[[TournamentEventRewardProto builder] mergeFromInputStream:input] build];
}
+ (TournamentEventRewardProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TournamentEventRewardProto*)[[[TournamentEventRewardProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TournamentEventRewardProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TournamentEventRewardProto*)[[[TournamentEventRewardProto builder] mergeFromCodedInputStream:input] build];
}
+ (TournamentEventRewardProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TournamentEventRewardProto*)[[[TournamentEventRewardProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TournamentEventRewardProto_Builder*) builder {
  return [[[TournamentEventRewardProto_Builder alloc] init] autorelease];
}
+ (TournamentEventRewardProto_Builder*) builderWithPrototype:(TournamentEventRewardProto*) prototype {
  return [[TournamentEventRewardProto builder] mergeFrom:prototype];
}
- (TournamentEventRewardProto_Builder*) builder {
  return [TournamentEventRewardProto builder];
}
@end

@interface TournamentEventRewardProto_Builder()
@property (retain) TournamentEventRewardProto* result;
@end

@implementation TournamentEventRewardProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TournamentEventRewardProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TournamentEventRewardProto_Builder*) clear {
  self.result = [[[TournamentEventRewardProto alloc] init] autorelease];
  return self;
}
- (TournamentEventRewardProto_Builder*) clone {
  return [TournamentEventRewardProto builderWithPrototype:result];
}
- (TournamentEventRewardProto*) defaultInstance {
  return [TournamentEventRewardProto defaultInstance];
}
- (TournamentEventRewardProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TournamentEventRewardProto*) buildPartial {
  TournamentEventRewardProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TournamentEventRewardProto_Builder*) mergeFrom:(TournamentEventRewardProto*) other {
  if (other == [TournamentEventRewardProto defaultInstance]) {
    return self;
  }
  if (other.hasTournamentEventId) {
    [self setTournamentEventId:other.tournamentEventId];
  }
  if (other.hasMinRank) {
    [self setMinRank:other.minRank];
  }
  if (other.hasMaxRank) {
    [self setMaxRank:other.maxRank];
  }
  if (other.hasGoldRewarded) {
    [self setGoldRewarded:other.goldRewarded];
  }
  if (other.hasBackgroundImageName) {
    [self setBackgroundImageName:other.backgroundImageName];
  }
  if (other.hasPrizeImageName) {
    [self setPrizeImageName:other.prizeImageName];
  }
  if (other.hasTitleColor) {
    [self mergeTitleColor:other.titleColor];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TournamentEventRewardProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TournamentEventRewardProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTournamentEventId:[input readInt32]];
        break;
      }
      case 16: {
        [self setMinRank:[input readInt32]];
        break;
      }
      case 24: {
        [self setMaxRank:[input readInt32]];
        break;
      }
      case 32: {
        [self setGoldRewarded:[input readInt32]];
        break;
      }
      case 42: {
        [self setBackgroundImageName:[input readString]];
        break;
      }
      case 50: {
        [self setPrizeImageName:[input readString]];
        break;
      }
      case 58: {
        ColorProto_Builder* subBuilder = [ColorProto builder];
        if (self.hasTitleColor) {
          [subBuilder mergeFrom:self.titleColor];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTitleColor:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasTournamentEventId {
  return result.hasTournamentEventId;
}
- (int32_t) tournamentEventId {
  return result.tournamentEventId;
}
- (TournamentEventRewardProto_Builder*) setTournamentEventId:(int32_t) value {
  result.hasTournamentEventId = YES;
  result.tournamentEventId = value;
  return self;
}
- (TournamentEventRewardProto_Builder*) clearTournamentEventId {
  result.hasTournamentEventId = NO;
  result.tournamentEventId = 0;
  return self;
}
- (BOOL) hasMinRank {
  return result.hasMinRank;
}
- (int32_t) minRank {
  return result.minRank;
}
- (TournamentEventRewardProto_Builder*) setMinRank:(int32_t) value {
  result.hasMinRank = YES;
  result.minRank = value;
  return self;
}
- (TournamentEventRewardProto_Builder*) clearMinRank {
  result.hasMinRank = NO;
  result.minRank = 0;
  return self;
}
- (BOOL) hasMaxRank {
  return result.hasMaxRank;
}
- (int32_t) maxRank {
  return result.maxRank;
}
- (TournamentEventRewardProto_Builder*) setMaxRank:(int32_t) value {
  result.hasMaxRank = YES;
  result.maxRank = value;
  return self;
}
- (TournamentEventRewardProto_Builder*) clearMaxRank {
  result.hasMaxRank = NO;
  result.maxRank = 0;
  return self;
}
- (BOOL) hasGoldRewarded {
  return result.hasGoldRewarded;
}
- (int32_t) goldRewarded {
  return result.goldRewarded;
}
- (TournamentEventRewardProto_Builder*) setGoldRewarded:(int32_t) value {
  result.hasGoldRewarded = YES;
  result.goldRewarded = value;
  return self;
}
- (TournamentEventRewardProto_Builder*) clearGoldRewarded {
  result.hasGoldRewarded = NO;
  result.goldRewarded = 0;
  return self;
}
- (BOOL) hasBackgroundImageName {
  return result.hasBackgroundImageName;
}
- (NSString*) backgroundImageName {
  return result.backgroundImageName;
}
- (TournamentEventRewardProto_Builder*) setBackgroundImageName:(NSString*) value {
  result.hasBackgroundImageName = YES;
  result.backgroundImageName = value;
  return self;
}
- (TournamentEventRewardProto_Builder*) clearBackgroundImageName {
  result.hasBackgroundImageName = NO;
  result.backgroundImageName = @"";
  return self;
}
- (BOOL) hasPrizeImageName {
  return result.hasPrizeImageName;
}
- (NSString*) prizeImageName {
  return result.prizeImageName;
}
- (TournamentEventRewardProto_Builder*) setPrizeImageName:(NSString*) value {
  result.hasPrizeImageName = YES;
  result.prizeImageName = value;
  return self;
}
- (TournamentEventRewardProto_Builder*) clearPrizeImageName {
  result.hasPrizeImageName = NO;
  result.prizeImageName = @"";
  return self;
}
- (BOOL) hasTitleColor {
  return result.hasTitleColor;
}
- (ColorProto*) titleColor {
  return result.titleColor;
}
- (TournamentEventRewardProto_Builder*) setTitleColor:(ColorProto*) value {
  result.hasTitleColor = YES;
  result.titleColor = value;
  return self;
}
- (TournamentEventRewardProto_Builder*) setTitleColorBuilder:(ColorProto_Builder*) builderForValue {
  return [self setTitleColor:[builderForValue build]];
}
- (TournamentEventRewardProto_Builder*) mergeTitleColor:(ColorProto*) value {
  if (result.hasTitleColor &&
      result.titleColor != [ColorProto defaultInstance]) {
    result.titleColor =
      [[[ColorProto builderWithPrototype:result.titleColor] mergeFrom:value] buildPartial];
  } else {
    result.titleColor = value;
  }
  result.hasTitleColor = YES;
  return self;
}
- (TournamentEventRewardProto_Builder*) clearTitleColor {
  result.hasTitleColor = NO;
  result.titleColor = [ColorProto defaultInstance];
  return self;
}
@end

@interface MinimumUserProtoWithLevelForTournament ()
@property (retain) MinimumUserProto* minUserProto;
@property int32_t level;
@property int32_t tournamentRank;
@property Float64 tournamentScore;
@end

@implementation MinimumUserProtoWithLevelForTournament

- (BOOL) hasMinUserProto {
  return !!hasMinUserProto_;
}
- (void) setHasMinUserProto:(BOOL) value {
  hasMinUserProto_ = !!value;
}
@synthesize minUserProto;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value {
  hasLevel_ = !!value;
}
@synthesize level;
- (BOOL) hasTournamentRank {
  return !!hasTournamentRank_;
}
- (void) setHasTournamentRank:(BOOL) value {
  hasTournamentRank_ = !!value;
}
@synthesize tournamentRank;
- (BOOL) hasTournamentScore {
  return !!hasTournamentScore_;
}
- (void) setHasTournamentScore:(BOOL) value {
  hasTournamentScore_ = !!value;
}
@synthesize tournamentScore;
- (void) dealloc {
  self.minUserProto = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.minUserProto = [MinimumUserProto defaultInstance];
    self.level = 0;
    self.tournamentRank = 0;
    self.tournamentScore = 0;
  }
  return self;
}
static MinimumUserProtoWithLevelForTournament* defaultMinimumUserProtoWithLevelForTournamentInstance = nil;
+ (void) initialize {
  if (self == [MinimumUserProtoWithLevelForTournament class]) {
    defaultMinimumUserProtoWithLevelForTournamentInstance = [[MinimumUserProtoWithLevelForTournament alloc] init];
  }
}
+ (MinimumUserProtoWithLevelForTournament*) defaultInstance {
  return defaultMinimumUserProtoWithLevelForTournamentInstance;
}
- (MinimumUserProtoWithLevelForTournament*) defaultInstance {
  return defaultMinimumUserProtoWithLevelForTournamentInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMinUserProto) {
    [output writeMessage:1 value:self.minUserProto];
  }
  if (self.hasLevel) {
    [output writeInt32:2 value:self.level];
  }
  if (self.hasTournamentRank) {
    [output writeInt32:3 value:self.tournamentRank];
  }
  if (self.hasTournamentScore) {
    [output writeDouble:4 value:self.tournamentScore];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasMinUserProto) {
    size += computeMessageSize(1, self.minUserProto);
  }
  if (self.hasLevel) {
    size += computeInt32Size(2, self.level);
  }
  if (self.hasTournamentRank) {
    size += computeInt32Size(3, self.tournamentRank);
  }
  if (self.hasTournamentScore) {
    size += computeDoubleSize(4, self.tournamentScore);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MinimumUserProtoWithLevelForTournament*) parseFromData:(NSData*) data {
  return (MinimumUserProtoWithLevelForTournament*)[[[MinimumUserProtoWithLevelForTournament builder] mergeFromData:data] build];
}
+ (MinimumUserProtoWithLevelForTournament*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserProtoWithLevelForTournament*)[[[MinimumUserProtoWithLevelForTournament builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserProtoWithLevelForTournament*) parseFromInputStream:(NSInputStream*) input {
  return (MinimumUserProtoWithLevelForTournament*)[[[MinimumUserProtoWithLevelForTournament builder] mergeFromInputStream:input] build];
}
+ (MinimumUserProtoWithLevelForTournament*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserProtoWithLevelForTournament*)[[[MinimumUserProtoWithLevelForTournament builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserProtoWithLevelForTournament*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MinimumUserProtoWithLevelForTournament*)[[[MinimumUserProtoWithLevelForTournament builder] mergeFromCodedInputStream:input] build];
}
+ (MinimumUserProtoWithLevelForTournament*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserProtoWithLevelForTournament*)[[[MinimumUserProtoWithLevelForTournament builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserProtoWithLevelForTournament_Builder*) builder {
  return [[[MinimumUserProtoWithLevelForTournament_Builder alloc] init] autorelease];
}
+ (MinimumUserProtoWithLevelForTournament_Builder*) builderWithPrototype:(MinimumUserProtoWithLevelForTournament*) prototype {
  return [[MinimumUserProtoWithLevelForTournament builder] mergeFrom:prototype];
}
- (MinimumUserProtoWithLevelForTournament_Builder*) builder {
  return [MinimumUserProtoWithLevelForTournament builder];
}
@end

@interface MinimumUserProtoWithLevelForTournament_Builder()
@property (retain) MinimumUserProtoWithLevelForTournament* result;
@end

@implementation MinimumUserProtoWithLevelForTournament_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MinimumUserProtoWithLevelForTournament alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MinimumUserProtoWithLevelForTournament_Builder*) clear {
  self.result = [[[MinimumUserProtoWithLevelForTournament alloc] init] autorelease];
  return self;
}
- (MinimumUserProtoWithLevelForTournament_Builder*) clone {
  return [MinimumUserProtoWithLevelForTournament builderWithPrototype:result];
}
- (MinimumUserProtoWithLevelForTournament*) defaultInstance {
  return [MinimumUserProtoWithLevelForTournament defaultInstance];
}
- (MinimumUserProtoWithLevelForTournament*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MinimumUserProtoWithLevelForTournament*) buildPartial {
  MinimumUserProtoWithLevelForTournament* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MinimumUserProtoWithLevelForTournament_Builder*) mergeFrom:(MinimumUserProtoWithLevelForTournament*) other {
  if (other == [MinimumUserProtoWithLevelForTournament defaultInstance]) {
    return self;
  }
  if (other.hasMinUserProto) {
    [self mergeMinUserProto:other.minUserProto];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasTournamentRank) {
    [self setTournamentRank:other.tournamentRank];
  }
  if (other.hasTournamentScore) {
    [self setTournamentScore:other.tournamentScore];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MinimumUserProtoWithLevelForTournament_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MinimumUserProtoWithLevelForTournament_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MinimumUserProto_Builder* subBuilder = [MinimumUserProto builder];
        if (self.hasMinUserProto) {
          [subBuilder mergeFrom:self.minUserProto];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMinUserProto:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 24: {
        [self setTournamentRank:[input readInt32]];
        break;
      }
      case 33: {
        [self setTournamentScore:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasMinUserProto {
  return result.hasMinUserProto;
}
- (MinimumUserProto*) minUserProto {
  return result.minUserProto;
}
- (MinimumUserProtoWithLevelForTournament_Builder*) setMinUserProto:(MinimumUserProto*) value {
  result.hasMinUserProto = YES;
  result.minUserProto = value;
  return self;
}
- (MinimumUserProtoWithLevelForTournament_Builder*) setMinUserProtoBuilder:(MinimumUserProto_Builder*) builderForValue {
  return [self setMinUserProto:[builderForValue build]];
}
- (MinimumUserProtoWithLevelForTournament_Builder*) mergeMinUserProto:(MinimumUserProto*) value {
  if (result.hasMinUserProto &&
      result.minUserProto != [MinimumUserProto defaultInstance]) {
    result.minUserProto =
      [[[MinimumUserProto builderWithPrototype:result.minUserProto] mergeFrom:value] buildPartial];
  } else {
    result.minUserProto = value;
  }
  result.hasMinUserProto = YES;
  return self;
}
- (MinimumUserProtoWithLevelForTournament_Builder*) clearMinUserProto {
  result.hasMinUserProto = NO;
  result.minUserProto = [MinimumUserProto defaultInstance];
  return self;
}
- (BOOL) hasLevel {
  return result.hasLevel;
}
- (int32_t) level {
  return result.level;
}
- (MinimumUserProtoWithLevelForTournament_Builder*) setLevel:(int32_t) value {
  result.hasLevel = YES;
  result.level = value;
  return self;
}
- (MinimumUserProtoWithLevelForTournament_Builder*) clearLevel {
  result.hasLevel = NO;
  result.level = 0;
  return self;
}
- (BOOL) hasTournamentRank {
  return result.hasTournamentRank;
}
- (int32_t) tournamentRank {
  return result.tournamentRank;
}
- (MinimumUserProtoWithLevelForTournament_Builder*) setTournamentRank:(int32_t) value {
  result.hasTournamentRank = YES;
  result.tournamentRank = value;
  return self;
}
- (MinimumUserProtoWithLevelForTournament_Builder*) clearTournamentRank {
  result.hasTournamentRank = NO;
  result.tournamentRank = 0;
  return self;
}
- (BOOL) hasTournamentScore {
  return result.hasTournamentScore;
}
- (Float64) tournamentScore {
  return result.tournamentScore;
}
- (MinimumUserProtoWithLevelForTournament_Builder*) setTournamentScore:(Float64) value {
  result.hasTournamentScore = YES;
  result.tournamentScore = value;
  return self;
}
- (MinimumUserProtoWithLevelForTournament_Builder*) clearTournamentScore {
  result.hasTournamentScore = NO;
  result.tournamentScore = 0;
  return self;
}
@end

