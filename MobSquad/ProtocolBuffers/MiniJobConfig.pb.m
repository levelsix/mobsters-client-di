// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "MiniJobConfig.pb.h"

@implementation MiniJobConfigRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MiniJobConfigRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [MonsterStuffRoot registerAllExtensions:registry];
    [SharedEnumConfigRoot registerAllExtensions:registry];
    [StructureRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MiniJobProto ()
@property int32_t miniJobId;
@property int32_t requiredStructId;
@property (retain) NSString* name;
@property int32_t cashReward;
@property int32_t oilReward;
@property int32_t gemReward;
@property int32_t monsterIdReward;
@property Quality quality;
@property int32_t maxNumMonstersAllowed;
@property Float32 chanceToAppear;
@property int32_t hpRequired;
@property int32_t atkRequired;
@property int32_t minDmgDealt;
@property int32_t maxDmgDealt;
@property int32_t durationMinMinutes;
@property int32_t durationMaxMinutes;
@end

@implementation MiniJobProto

- (BOOL) hasMiniJobId {
  return !!hasMiniJobId_;
}
- (void) setHasMiniJobId:(BOOL) value {
  hasMiniJobId_ = !!value;
}
@synthesize miniJobId;
- (BOOL) hasRequiredStructId {
  return !!hasRequiredStructId_;
}
- (void) setHasRequiredStructId:(BOOL) value {
  hasRequiredStructId_ = !!value;
}
@synthesize requiredStructId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasCashReward {
  return !!hasCashReward_;
}
- (void) setHasCashReward:(BOOL) value {
  hasCashReward_ = !!value;
}
@synthesize cashReward;
- (BOOL) hasOilReward {
  return !!hasOilReward_;
}
- (void) setHasOilReward:(BOOL) value {
  hasOilReward_ = !!value;
}
@synthesize oilReward;
- (BOOL) hasGemReward {
  return !!hasGemReward_;
}
- (void) setHasGemReward:(BOOL) value {
  hasGemReward_ = !!value;
}
@synthesize gemReward;
- (BOOL) hasMonsterIdReward {
  return !!hasMonsterIdReward_;
}
- (void) setHasMonsterIdReward:(BOOL) value {
  hasMonsterIdReward_ = !!value;
}
@synthesize monsterIdReward;
- (BOOL) hasQuality {
  return !!hasQuality_;
}
- (void) setHasQuality:(BOOL) value {
  hasQuality_ = !!value;
}
@synthesize quality;
- (BOOL) hasMaxNumMonstersAllowed {
  return !!hasMaxNumMonstersAllowed_;
}
- (void) setHasMaxNumMonstersAllowed:(BOOL) value {
  hasMaxNumMonstersAllowed_ = !!value;
}
@synthesize maxNumMonstersAllowed;
- (BOOL) hasChanceToAppear {
  return !!hasChanceToAppear_;
}
- (void) setHasChanceToAppear:(BOOL) value {
  hasChanceToAppear_ = !!value;
}
@synthesize chanceToAppear;
- (BOOL) hasHpRequired {
  return !!hasHpRequired_;
}
- (void) setHasHpRequired:(BOOL) value {
  hasHpRequired_ = !!value;
}
@synthesize hpRequired;
- (BOOL) hasAtkRequired {
  return !!hasAtkRequired_;
}
- (void) setHasAtkRequired:(BOOL) value {
  hasAtkRequired_ = !!value;
}
@synthesize atkRequired;
- (BOOL) hasMinDmgDealt {
  return !!hasMinDmgDealt_;
}
- (void) setHasMinDmgDealt:(BOOL) value {
  hasMinDmgDealt_ = !!value;
}
@synthesize minDmgDealt;
- (BOOL) hasMaxDmgDealt {
  return !!hasMaxDmgDealt_;
}
- (void) setHasMaxDmgDealt:(BOOL) value {
  hasMaxDmgDealt_ = !!value;
}
@synthesize maxDmgDealt;
- (BOOL) hasDurationMinMinutes {
  return !!hasDurationMinMinutes_;
}
- (void) setHasDurationMinMinutes:(BOOL) value {
  hasDurationMinMinutes_ = !!value;
}
@synthesize durationMinMinutes;
- (BOOL) hasDurationMaxMinutes {
  return !!hasDurationMaxMinutes_;
}
- (void) setHasDurationMaxMinutes:(BOOL) value {
  hasDurationMaxMinutes_ = !!value;
}
@synthesize durationMaxMinutes;
- (void) dealloc {
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.miniJobId = 0;
    self.requiredStructId = 0;
    self.name = @"";
    self.cashReward = 0;
    self.oilReward = 0;
    self.gemReward = 0;
    self.monsterIdReward = 0;
    self.quality = QualityNoQuality;
    self.maxNumMonstersAllowed = 0;
    self.chanceToAppear = 0;
    self.hpRequired = 0;
    self.atkRequired = 0;
    self.minDmgDealt = 0;
    self.maxDmgDealt = 0;
    self.durationMinMinutes = 0;
    self.durationMaxMinutes = 0;
  }
  return self;
}
static MiniJobProto* defaultMiniJobProtoInstance = nil;
+ (void) initialize {
  if (self == [MiniJobProto class]) {
    defaultMiniJobProtoInstance = [[MiniJobProto alloc] init];
  }
}
+ (MiniJobProto*) defaultInstance {
  return defaultMiniJobProtoInstance;
}
- (MiniJobProto*) defaultInstance {
  return defaultMiniJobProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMiniJobId) {
    [output writeInt32:1 value:self.miniJobId];
  }
  if (self.hasRequiredStructId) {
    [output writeInt32:2 value:self.requiredStructId];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasCashReward) {
    [output writeInt32:4 value:self.cashReward];
  }
  if (self.hasOilReward) {
    [output writeInt32:5 value:self.oilReward];
  }
  if (self.hasGemReward) {
    [output writeInt32:6 value:self.gemReward];
  }
  if (self.hasMonsterIdReward) {
    [output writeInt32:7 value:self.monsterIdReward];
  }
  if (self.hasQuality) {
    [output writeEnum:8 value:self.quality];
  }
  if (self.hasMaxNumMonstersAllowed) {
    [output writeInt32:9 value:self.maxNumMonstersAllowed];
  }
  if (self.hasChanceToAppear) {
    [output writeFloat:10 value:self.chanceToAppear];
  }
  if (self.hasHpRequired) {
    [output writeInt32:11 value:self.hpRequired];
  }
  if (self.hasAtkRequired) {
    [output writeInt32:12 value:self.atkRequired];
  }
  if (self.hasMinDmgDealt) {
    [output writeInt32:13 value:self.minDmgDealt];
  }
  if (self.hasMaxDmgDealt) {
    [output writeInt32:14 value:self.maxDmgDealt];
  }
  if (self.hasDurationMinMinutes) {
    [output writeInt32:15 value:self.durationMinMinutes];
  }
  if (self.hasDurationMaxMinutes) {
    [output writeInt32:16 value:self.durationMaxMinutes];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasMiniJobId) {
    size += computeInt32Size(1, self.miniJobId);
  }
  if (self.hasRequiredStructId) {
    size += computeInt32Size(2, self.requiredStructId);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasCashReward) {
    size += computeInt32Size(4, self.cashReward);
  }
  if (self.hasOilReward) {
    size += computeInt32Size(5, self.oilReward);
  }
  if (self.hasGemReward) {
    size += computeInt32Size(6, self.gemReward);
  }
  if (self.hasMonsterIdReward) {
    size += computeInt32Size(7, self.monsterIdReward);
  }
  if (self.hasQuality) {
    size += computeEnumSize(8, self.quality);
  }
  if (self.hasMaxNumMonstersAllowed) {
    size += computeInt32Size(9, self.maxNumMonstersAllowed);
  }
  if (self.hasChanceToAppear) {
    size += computeFloatSize(10, self.chanceToAppear);
  }
  if (self.hasHpRequired) {
    size += computeInt32Size(11, self.hpRequired);
  }
  if (self.hasAtkRequired) {
    size += computeInt32Size(12, self.atkRequired);
  }
  if (self.hasMinDmgDealt) {
    size += computeInt32Size(13, self.minDmgDealt);
  }
  if (self.hasMaxDmgDealt) {
    size += computeInt32Size(14, self.maxDmgDealt);
  }
  if (self.hasDurationMinMinutes) {
    size += computeInt32Size(15, self.durationMinMinutes);
  }
  if (self.hasDurationMaxMinutes) {
    size += computeInt32Size(16, self.durationMaxMinutes);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MiniJobProto*) parseFromData:(NSData*) data {
  return (MiniJobProto*)[[[MiniJobProto builder] mergeFromData:data] build];
}
+ (MiniJobProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniJobProto*)[[[MiniJobProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MiniJobProto*) parseFromInputStream:(NSInputStream*) input {
  return (MiniJobProto*)[[[MiniJobProto builder] mergeFromInputStream:input] build];
}
+ (MiniJobProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniJobProto*)[[[MiniJobProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MiniJobProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MiniJobProto*)[[[MiniJobProto builder] mergeFromCodedInputStream:input] build];
}
+ (MiniJobProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniJobProto*)[[[MiniJobProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MiniJobProto_Builder*) builder {
  return [[[MiniJobProto_Builder alloc] init] autorelease];
}
+ (MiniJobProto_Builder*) builderWithPrototype:(MiniJobProto*) prototype {
  return [[MiniJobProto builder] mergeFrom:prototype];
}
- (MiniJobProto_Builder*) builder {
  return [MiniJobProto builder];
}
@end

@interface MiniJobProto_Builder()
@property (retain) MiniJobProto* result;
@end

@implementation MiniJobProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MiniJobProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MiniJobProto_Builder*) clear {
  self.result = [[[MiniJobProto alloc] init] autorelease];
  return self;
}
- (MiniJobProto_Builder*) clone {
  return [MiniJobProto builderWithPrototype:result];
}
- (MiniJobProto*) defaultInstance {
  return [MiniJobProto defaultInstance];
}
- (MiniJobProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MiniJobProto*) buildPartial {
  MiniJobProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MiniJobProto_Builder*) mergeFrom:(MiniJobProto*) other {
  if (other == [MiniJobProto defaultInstance]) {
    return self;
  }
  if (other.hasMiniJobId) {
    [self setMiniJobId:other.miniJobId];
  }
  if (other.hasRequiredStructId) {
    [self setRequiredStructId:other.requiredStructId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasCashReward) {
    [self setCashReward:other.cashReward];
  }
  if (other.hasOilReward) {
    [self setOilReward:other.oilReward];
  }
  if (other.hasGemReward) {
    [self setGemReward:other.gemReward];
  }
  if (other.hasMonsterIdReward) {
    [self setMonsterIdReward:other.monsterIdReward];
  }
  if (other.hasQuality) {
    [self setQuality:other.quality];
  }
  if (other.hasMaxNumMonstersAllowed) {
    [self setMaxNumMonstersAllowed:other.maxNumMonstersAllowed];
  }
  if (other.hasChanceToAppear) {
    [self setChanceToAppear:other.chanceToAppear];
  }
  if (other.hasHpRequired) {
    [self setHpRequired:other.hpRequired];
  }
  if (other.hasAtkRequired) {
    [self setAtkRequired:other.atkRequired];
  }
  if (other.hasMinDmgDealt) {
    [self setMinDmgDealt:other.minDmgDealt];
  }
  if (other.hasMaxDmgDealt) {
    [self setMaxDmgDealt:other.maxDmgDealt];
  }
  if (other.hasDurationMinMinutes) {
    [self setDurationMinMinutes:other.durationMinMinutes];
  }
  if (other.hasDurationMaxMinutes) {
    [self setDurationMaxMinutes:other.durationMaxMinutes];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MiniJobProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MiniJobProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMiniJobId:[input readInt32]];
        break;
      }
      case 16: {
        [self setRequiredStructId:[input readInt32]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        [self setCashReward:[input readInt32]];
        break;
      }
      case 40: {
        [self setOilReward:[input readInt32]];
        break;
      }
      case 48: {
        [self setGemReward:[input readInt32]];
        break;
      }
      case 56: {
        [self setMonsterIdReward:[input readInt32]];
        break;
      }
      case 64: {
        int32_t value = [input readEnum];
        if (QualityIsValidValue(value)) {
          [self setQuality:value];
        } else {
          [unknownFields mergeVarintField:8 value:value];
        }
        break;
      }
      case 72: {
        [self setMaxNumMonstersAllowed:[input readInt32]];
        break;
      }
      case 85: {
        [self setChanceToAppear:[input readFloat]];
        break;
      }
      case 88: {
        [self setHpRequired:[input readInt32]];
        break;
      }
      case 96: {
        [self setAtkRequired:[input readInt32]];
        break;
      }
      case 104: {
        [self setMinDmgDealt:[input readInt32]];
        break;
      }
      case 112: {
        [self setMaxDmgDealt:[input readInt32]];
        break;
      }
      case 120: {
        [self setDurationMinMinutes:[input readInt32]];
        break;
      }
      case 128: {
        [self setDurationMaxMinutes:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMiniJobId {
  return result.hasMiniJobId;
}
- (int32_t) miniJobId {
  return result.miniJobId;
}
- (MiniJobProto_Builder*) setMiniJobId:(int32_t) value {
  result.hasMiniJobId = YES;
  result.miniJobId = value;
  return self;
}
- (MiniJobProto_Builder*) clearMiniJobId {
  result.hasMiniJobId = NO;
  result.miniJobId = 0;
  return self;
}
- (BOOL) hasRequiredStructId {
  return result.hasRequiredStructId;
}
- (int32_t) requiredStructId {
  return result.requiredStructId;
}
- (MiniJobProto_Builder*) setRequiredStructId:(int32_t) value {
  result.hasRequiredStructId = YES;
  result.requiredStructId = value;
  return self;
}
- (MiniJobProto_Builder*) clearRequiredStructId {
  result.hasRequiredStructId = NO;
  result.requiredStructId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MiniJobProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MiniJobProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasCashReward {
  return result.hasCashReward;
}
- (int32_t) cashReward {
  return result.cashReward;
}
- (MiniJobProto_Builder*) setCashReward:(int32_t) value {
  result.hasCashReward = YES;
  result.cashReward = value;
  return self;
}
- (MiniJobProto_Builder*) clearCashReward {
  result.hasCashReward = NO;
  result.cashReward = 0;
  return self;
}
- (BOOL) hasOilReward {
  return result.hasOilReward;
}
- (int32_t) oilReward {
  return result.oilReward;
}
- (MiniJobProto_Builder*) setOilReward:(int32_t) value {
  result.hasOilReward = YES;
  result.oilReward = value;
  return self;
}
- (MiniJobProto_Builder*) clearOilReward {
  result.hasOilReward = NO;
  result.oilReward = 0;
  return self;
}
- (BOOL) hasGemReward {
  return result.hasGemReward;
}
- (int32_t) gemReward {
  return result.gemReward;
}
- (MiniJobProto_Builder*) setGemReward:(int32_t) value {
  result.hasGemReward = YES;
  result.gemReward = value;
  return self;
}
- (MiniJobProto_Builder*) clearGemReward {
  result.hasGemReward = NO;
  result.gemReward = 0;
  return self;
}
- (BOOL) hasMonsterIdReward {
  return result.hasMonsterIdReward;
}
- (int32_t) monsterIdReward {
  return result.monsterIdReward;
}
- (MiniJobProto_Builder*) setMonsterIdReward:(int32_t) value {
  result.hasMonsterIdReward = YES;
  result.monsterIdReward = value;
  return self;
}
- (MiniJobProto_Builder*) clearMonsterIdReward {
  result.hasMonsterIdReward = NO;
  result.monsterIdReward = 0;
  return self;
}
- (BOOL) hasQuality {
  return result.hasQuality;
}
- (Quality) quality {
  return result.quality;
}
- (MiniJobProto_Builder*) setQuality:(Quality) value {
  result.hasQuality = YES;
  result.quality = value;
  return self;
}
- (MiniJobProto_Builder*) clearQuality {
  result.hasQuality = NO;
  result.quality = QualityNoQuality;
  return self;
}
- (BOOL) hasMaxNumMonstersAllowed {
  return result.hasMaxNumMonstersAllowed;
}
- (int32_t) maxNumMonstersAllowed {
  return result.maxNumMonstersAllowed;
}
- (MiniJobProto_Builder*) setMaxNumMonstersAllowed:(int32_t) value {
  result.hasMaxNumMonstersAllowed = YES;
  result.maxNumMonstersAllowed = value;
  return self;
}
- (MiniJobProto_Builder*) clearMaxNumMonstersAllowed {
  result.hasMaxNumMonstersAllowed = NO;
  result.maxNumMonstersAllowed = 0;
  return self;
}
- (BOOL) hasChanceToAppear {
  return result.hasChanceToAppear;
}
- (Float32) chanceToAppear {
  return result.chanceToAppear;
}
- (MiniJobProto_Builder*) setChanceToAppear:(Float32) value {
  result.hasChanceToAppear = YES;
  result.chanceToAppear = value;
  return self;
}
- (MiniJobProto_Builder*) clearChanceToAppear {
  result.hasChanceToAppear = NO;
  result.chanceToAppear = 0;
  return self;
}
- (BOOL) hasHpRequired {
  return result.hasHpRequired;
}
- (int32_t) hpRequired {
  return result.hpRequired;
}
- (MiniJobProto_Builder*) setHpRequired:(int32_t) value {
  result.hasHpRequired = YES;
  result.hpRequired = value;
  return self;
}
- (MiniJobProto_Builder*) clearHpRequired {
  result.hasHpRequired = NO;
  result.hpRequired = 0;
  return self;
}
- (BOOL) hasAtkRequired {
  return result.hasAtkRequired;
}
- (int32_t) atkRequired {
  return result.atkRequired;
}
- (MiniJobProto_Builder*) setAtkRequired:(int32_t) value {
  result.hasAtkRequired = YES;
  result.atkRequired = value;
  return self;
}
- (MiniJobProto_Builder*) clearAtkRequired {
  result.hasAtkRequired = NO;
  result.atkRequired = 0;
  return self;
}
- (BOOL) hasMinDmgDealt {
  return result.hasMinDmgDealt;
}
- (int32_t) minDmgDealt {
  return result.minDmgDealt;
}
- (MiniJobProto_Builder*) setMinDmgDealt:(int32_t) value {
  result.hasMinDmgDealt = YES;
  result.minDmgDealt = value;
  return self;
}
- (MiniJobProto_Builder*) clearMinDmgDealt {
  result.hasMinDmgDealt = NO;
  result.minDmgDealt = 0;
  return self;
}
- (BOOL) hasMaxDmgDealt {
  return result.hasMaxDmgDealt;
}
- (int32_t) maxDmgDealt {
  return result.maxDmgDealt;
}
- (MiniJobProto_Builder*) setMaxDmgDealt:(int32_t) value {
  result.hasMaxDmgDealt = YES;
  result.maxDmgDealt = value;
  return self;
}
- (MiniJobProto_Builder*) clearMaxDmgDealt {
  result.hasMaxDmgDealt = NO;
  result.maxDmgDealt = 0;
  return self;
}
- (BOOL) hasDurationMinMinutes {
  return result.hasDurationMinMinutes;
}
- (int32_t) durationMinMinutes {
  return result.durationMinMinutes;
}
- (MiniJobProto_Builder*) setDurationMinMinutes:(int32_t) value {
  result.hasDurationMinMinutes = YES;
  result.durationMinMinutes = value;
  return self;
}
- (MiniJobProto_Builder*) clearDurationMinMinutes {
  result.hasDurationMinMinutes = NO;
  result.durationMinMinutes = 0;
  return self;
}
- (BOOL) hasDurationMaxMinutes {
  return result.hasDurationMaxMinutes;
}
- (int32_t) durationMaxMinutes {
  return result.durationMaxMinutes;
}
- (MiniJobProto_Builder*) setDurationMaxMinutes:(int32_t) value {
  result.hasDurationMaxMinutes = YES;
  result.durationMaxMinutes = value;
  return self;
}
- (MiniJobProto_Builder*) clearDurationMaxMinutes {
  result.hasDurationMaxMinutes = NO;
  result.durationMaxMinutes = 0;
  return self;
}
@end

@interface UserMiniJobProto ()
@property int64_t userMiniJobId;
@property int32_t baseDmgReceived;
@property int64_t timeStarted;
@property (retain) NSMutableArray* mutableUserMonsterIdsList;
@property int64_t timeCompleted;
@property int32_t durationMinutes;
@property (retain) MiniJobProto* miniJob;
@end

@implementation UserMiniJobProto

- (BOOL) hasUserMiniJobId {
  return !!hasUserMiniJobId_;
}
- (void) setHasUserMiniJobId:(BOOL) value {
  hasUserMiniJobId_ = !!value;
}
@synthesize userMiniJobId;
- (BOOL) hasBaseDmgReceived {
  return !!hasBaseDmgReceived_;
}
- (void) setHasBaseDmgReceived:(BOOL) value {
  hasBaseDmgReceived_ = !!value;
}
@synthesize baseDmgReceived;
- (BOOL) hasTimeStarted {
  return !!hasTimeStarted_;
}
- (void) setHasTimeStarted:(BOOL) value {
  hasTimeStarted_ = !!value;
}
@synthesize timeStarted;
@synthesize mutableUserMonsterIdsList;
- (BOOL) hasTimeCompleted {
  return !!hasTimeCompleted_;
}
- (void) setHasTimeCompleted:(BOOL) value {
  hasTimeCompleted_ = !!value;
}
@synthesize timeCompleted;
- (BOOL) hasDurationMinutes {
  return !!hasDurationMinutes_;
}
- (void) setHasDurationMinutes:(BOOL) value {
  hasDurationMinutes_ = !!value;
}
@synthesize durationMinutes;
- (BOOL) hasMiniJob {
  return !!hasMiniJob_;
}
- (void) setHasMiniJob:(BOOL) value {
  hasMiniJob_ = !!value;
}
@synthesize miniJob;
- (void) dealloc {
  self.mutableUserMonsterIdsList = nil;
  self.miniJob = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userMiniJobId = 0L;
    self.baseDmgReceived = 0;
    self.timeStarted = 0L;
    self.timeCompleted = 0L;
    self.durationMinutes = 0;
    self.miniJob = [MiniJobProto defaultInstance];
  }
  return self;
}
static UserMiniJobProto* defaultUserMiniJobProtoInstance = nil;
+ (void) initialize {
  if (self == [UserMiniJobProto class]) {
    defaultUserMiniJobProtoInstance = [[UserMiniJobProto alloc] init];
  }
}
+ (UserMiniJobProto*) defaultInstance {
  return defaultUserMiniJobProtoInstance;
}
- (UserMiniJobProto*) defaultInstance {
  return defaultUserMiniJobProtoInstance;
}
- (NSArray*) userMonsterIdsList {
  return mutableUserMonsterIdsList;
}
- (int64_t) userMonsterIdsAtIndex:(int32_t) index {
  id value = [mutableUserMonsterIdsList objectAtIndex:index];
  return [value longLongValue];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserMiniJobId) {
    [output writeInt64:1 value:self.userMiniJobId];
  }
  if (self.hasBaseDmgReceived) {
    [output writeInt32:2 value:self.baseDmgReceived];
  }
  if (self.hasTimeStarted) {
    [output writeInt64:3 value:self.timeStarted];
  }
  for (NSNumber* value in self.mutableUserMonsterIdsList) {
    [output writeInt64:4 value:[value longLongValue]];
  }
  if (self.hasTimeCompleted) {
    [output writeInt64:5 value:self.timeCompleted];
  }
  if (self.hasMiniJob) {
    [output writeMessage:6 value:self.miniJob];
  }
  if (self.hasDurationMinutes) {
    [output writeInt32:7 value:self.durationMinutes];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserMiniJobId) {
    size += computeInt64Size(1, self.userMiniJobId);
  }
  if (self.hasBaseDmgReceived) {
    size += computeInt32Size(2, self.baseDmgReceived);
  }
  if (self.hasTimeStarted) {
    size += computeInt64Size(3, self.timeStarted);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableUserMonsterIdsList) {
      dataSize += computeInt64SizeNoTag([value longLongValue]);
    }
    size += dataSize;
    size += 1 * self.mutableUserMonsterIdsList.count;
  }
  if (self.hasTimeCompleted) {
    size += computeInt64Size(5, self.timeCompleted);
  }
  if (self.hasMiniJob) {
    size += computeMessageSize(6, self.miniJob);
  }
  if (self.hasDurationMinutes) {
    size += computeInt32Size(7, self.durationMinutes);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserMiniJobProto*) parseFromData:(NSData*) data {
  return (UserMiniJobProto*)[[[UserMiniJobProto builder] mergeFromData:data] build];
}
+ (UserMiniJobProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMiniJobProto*)[[[UserMiniJobProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserMiniJobProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserMiniJobProto*)[[[UserMiniJobProto builder] mergeFromInputStream:input] build];
}
+ (UserMiniJobProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMiniJobProto*)[[[UserMiniJobProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMiniJobProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserMiniJobProto*)[[[UserMiniJobProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserMiniJobProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMiniJobProto*)[[[UserMiniJobProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMiniJobProto_Builder*) builder {
  return [[[UserMiniJobProto_Builder alloc] init] autorelease];
}
+ (UserMiniJobProto_Builder*) builderWithPrototype:(UserMiniJobProto*) prototype {
  return [[UserMiniJobProto builder] mergeFrom:prototype];
}
- (UserMiniJobProto_Builder*) builder {
  return [UserMiniJobProto builder];
}
@end

@interface UserMiniJobProto_Builder()
@property (retain) UserMiniJobProto* result;
@end

@implementation UserMiniJobProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserMiniJobProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserMiniJobProto_Builder*) clear {
  self.result = [[[UserMiniJobProto alloc] init] autorelease];
  return self;
}
- (UserMiniJobProto_Builder*) clone {
  return [UserMiniJobProto builderWithPrototype:result];
}
- (UserMiniJobProto*) defaultInstance {
  return [UserMiniJobProto defaultInstance];
}
- (UserMiniJobProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserMiniJobProto*) buildPartial {
  UserMiniJobProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserMiniJobProto_Builder*) mergeFrom:(UserMiniJobProto*) other {
  if (other == [UserMiniJobProto defaultInstance]) {
    return self;
  }
  if (other.hasUserMiniJobId) {
    [self setUserMiniJobId:other.userMiniJobId];
  }
  if (other.hasBaseDmgReceived) {
    [self setBaseDmgReceived:other.baseDmgReceived];
  }
  if (other.hasTimeStarted) {
    [self setTimeStarted:other.timeStarted];
  }
  if (other.mutableUserMonsterIdsList.count > 0) {
    if (result.mutableUserMonsterIdsList == nil) {
      result.mutableUserMonsterIdsList = [NSMutableArray array];
    }
    [result.mutableUserMonsterIdsList addObjectsFromArray:other.mutableUserMonsterIdsList];
  }
  if (other.hasTimeCompleted) {
    [self setTimeCompleted:other.timeCompleted];
  }
  if (other.hasDurationMinutes) {
    [self setDurationMinutes:other.durationMinutes];
  }
  if (other.hasMiniJob) {
    [self mergeMiniJob:other.miniJob];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserMiniJobProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserMiniJobProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserMiniJobId:[input readInt64]];
        break;
      }
      case 16: {
        [self setBaseDmgReceived:[input readInt32]];
        break;
      }
      case 24: {
        [self setTimeStarted:[input readInt64]];
        break;
      }
      case 32: {
        [self addUserMonsterIds:[input readInt64]];
        break;
      }
      case 40: {
        [self setTimeCompleted:[input readInt64]];
        break;
      }
      case 50: {
        MiniJobProto_Builder* subBuilder = [MiniJobProto builder];
        if (self.hasMiniJob) {
          [subBuilder mergeFrom:self.miniJob];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMiniJob:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        [self setDurationMinutes:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserMiniJobId {
  return result.hasUserMiniJobId;
}
- (int64_t) userMiniJobId {
  return result.userMiniJobId;
}
- (UserMiniJobProto_Builder*) setUserMiniJobId:(int64_t) value {
  result.hasUserMiniJobId = YES;
  result.userMiniJobId = value;
  return self;
}
- (UserMiniJobProto_Builder*) clearUserMiniJobId {
  result.hasUserMiniJobId = NO;
  result.userMiniJobId = 0L;
  return self;
}
- (BOOL) hasBaseDmgReceived {
  return result.hasBaseDmgReceived;
}
- (int32_t) baseDmgReceived {
  return result.baseDmgReceived;
}
- (UserMiniJobProto_Builder*) setBaseDmgReceived:(int32_t) value {
  result.hasBaseDmgReceived = YES;
  result.baseDmgReceived = value;
  return self;
}
- (UserMiniJobProto_Builder*) clearBaseDmgReceived {
  result.hasBaseDmgReceived = NO;
  result.baseDmgReceived = 0;
  return self;
}
- (BOOL) hasTimeStarted {
  return result.hasTimeStarted;
}
- (int64_t) timeStarted {
  return result.timeStarted;
}
- (UserMiniJobProto_Builder*) setTimeStarted:(int64_t) value {
  result.hasTimeStarted = YES;
  result.timeStarted = value;
  return self;
}
- (UserMiniJobProto_Builder*) clearTimeStarted {
  result.hasTimeStarted = NO;
  result.timeStarted = 0L;
  return self;
}
- (NSArray*) userMonsterIdsList {
  if (result.mutableUserMonsterIdsList == nil) {
    return [NSArray array];
  }
  return result.mutableUserMonsterIdsList;
}
- (int64_t) userMonsterIdsAtIndex:(int32_t) index {
  return [result userMonsterIdsAtIndex:index];
}
- (UserMiniJobProto_Builder*) replaceUserMonsterIdsAtIndex:(int32_t) index with:(int64_t) value {
  [result.mutableUserMonsterIdsList replaceObjectAtIndex:index withObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (UserMiniJobProto_Builder*) addUserMonsterIds:(int64_t) value {
  if (result.mutableUserMonsterIdsList == nil) {
    result.mutableUserMonsterIdsList = [NSMutableArray array];
  }
  [result.mutableUserMonsterIdsList addObject:[NSNumber numberWithLongLong:value]];
  return self;
}
- (UserMiniJobProto_Builder*) addAllUserMonsterIds:(NSArray*) values {
  if (result.mutableUserMonsterIdsList == nil) {
    result.mutableUserMonsterIdsList = [NSMutableArray array];
  }
  [result.mutableUserMonsterIdsList addObjectsFromArray:values];
  return self;
}
- (UserMiniJobProto_Builder*) clearUserMonsterIdsList {
  result.mutableUserMonsterIdsList = nil;
  return self;
}
- (BOOL) hasTimeCompleted {
  return result.hasTimeCompleted;
}
- (int64_t) timeCompleted {
  return result.timeCompleted;
}
- (UserMiniJobProto_Builder*) setTimeCompleted:(int64_t) value {
  result.hasTimeCompleted = YES;
  result.timeCompleted = value;
  return self;
}
- (UserMiniJobProto_Builder*) clearTimeCompleted {
  result.hasTimeCompleted = NO;
  result.timeCompleted = 0L;
  return self;
}
- (BOOL) hasDurationMinutes {
  return result.hasDurationMinutes;
}
- (int32_t) durationMinutes {
  return result.durationMinutes;
}
- (UserMiniJobProto_Builder*) setDurationMinutes:(int32_t) value {
  result.hasDurationMinutes = YES;
  result.durationMinutes = value;
  return self;
}
- (UserMiniJobProto_Builder*) clearDurationMinutes {
  result.hasDurationMinutes = NO;
  result.durationMinutes = 0;
  return self;
}
- (BOOL) hasMiniJob {
  return result.hasMiniJob;
}
- (MiniJobProto*) miniJob {
  return result.miniJob;
}
- (UserMiniJobProto_Builder*) setMiniJob:(MiniJobProto*) value {
  result.hasMiniJob = YES;
  result.miniJob = value;
  return self;
}
- (UserMiniJobProto_Builder*) setMiniJobBuilder:(MiniJobProto_Builder*) builderForValue {
  return [self setMiniJob:[builderForValue build]];
}
- (UserMiniJobProto_Builder*) mergeMiniJob:(MiniJobProto*) value {
  if (result.hasMiniJob &&
      result.miniJob != [MiniJobProto defaultInstance]) {
    result.miniJob =
      [[[MiniJobProto builderWithPrototype:result.miniJob] mergeFrom:value] buildPartial];
  } else {
    result.miniJob = value;
  }
  result.hasMiniJob = YES;
  return self;
}
- (UserMiniJobProto_Builder*) clearMiniJob {
  result.hasMiniJob = NO;
  result.miniJob = [MiniJobProto defaultInstance];
  return self;
}
@end

