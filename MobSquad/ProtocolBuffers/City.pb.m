// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "City.pb.h"

@implementation CityRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [CityRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [StructureRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface UserCityExpansionDataProto ()
@property int32_t userId;
@property int32_t xPosition;
@property int32_t yPosition;
@property BOOL isExpanding;
@property int64_t expandStartTime;
@end

@implementation UserCityExpansionDataProto

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasXPosition {
  return !!hasXPosition_;
}
- (void) setHasXPosition:(BOOL) value {
  hasXPosition_ = !!value;
}
@synthesize xPosition;
- (BOOL) hasYPosition {
  return !!hasYPosition_;
}
- (void) setHasYPosition:(BOOL) value {
  hasYPosition_ = !!value;
}
@synthesize yPosition;
- (BOOL) hasIsExpanding {
  return !!hasIsExpanding_;
}
- (void) setHasIsExpanding:(BOOL) value {
  hasIsExpanding_ = !!value;
}
- (BOOL) isExpanding {
  return !!isExpanding_;
}
- (void) setIsExpanding:(BOOL) value {
  isExpanding_ = !!value;
}
- (BOOL) hasExpandStartTime {
  return !!hasExpandStartTime_;
}
- (void) setHasExpandStartTime:(BOOL) value {
  hasExpandStartTime_ = !!value;
}
@synthesize expandStartTime;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.xPosition = 0;
    self.yPosition = 0;
    self.isExpanding = NO;
    self.expandStartTime = 0L;
  }
  return self;
}
static UserCityExpansionDataProto* defaultUserCityExpansionDataProtoInstance = nil;
+ (void) initialize {
  if (self == [UserCityExpansionDataProto class]) {
    defaultUserCityExpansionDataProtoInstance = [[UserCityExpansionDataProto alloc] init];
  }
}
+ (UserCityExpansionDataProto*) defaultInstance {
  return defaultUserCityExpansionDataProtoInstance;
}
- (UserCityExpansionDataProto*) defaultInstance {
  return defaultUserCityExpansionDataProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  if (self.hasXPosition) {
    [output writeSInt32:2 value:self.xPosition];
  }
  if (self.hasYPosition) {
    [output writeSInt32:3 value:self.yPosition];
  }
  if (self.hasIsExpanding) {
    [output writeBool:4 value:self.isExpanding];
  }
  if (self.hasExpandStartTime) {
    [output writeInt64:5 value:self.expandStartTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeInt32Size(1, self.userId);
  }
  if (self.hasXPosition) {
    size += computeSInt32Size(2, self.xPosition);
  }
  if (self.hasYPosition) {
    size += computeSInt32Size(3, self.yPosition);
  }
  if (self.hasIsExpanding) {
    size += computeBoolSize(4, self.isExpanding);
  }
  if (self.hasExpandStartTime) {
    size += computeInt64Size(5, self.expandStartTime);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserCityExpansionDataProto*) parseFromData:(NSData*) data {
  return (UserCityExpansionDataProto*)[[[UserCityExpansionDataProto builder] mergeFromData:data] build];
}
+ (UserCityExpansionDataProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserCityExpansionDataProto*)[[[UserCityExpansionDataProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserCityExpansionDataProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserCityExpansionDataProto*)[[[UserCityExpansionDataProto builder] mergeFromInputStream:input] build];
}
+ (UserCityExpansionDataProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserCityExpansionDataProto*)[[[UserCityExpansionDataProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserCityExpansionDataProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserCityExpansionDataProto*)[[[UserCityExpansionDataProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserCityExpansionDataProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserCityExpansionDataProto*)[[[UserCityExpansionDataProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserCityExpansionDataProto_Builder*) builder {
  return [[[UserCityExpansionDataProto_Builder alloc] init] autorelease];
}
+ (UserCityExpansionDataProto_Builder*) builderWithPrototype:(UserCityExpansionDataProto*) prototype {
  return [[UserCityExpansionDataProto builder] mergeFrom:prototype];
}
- (UserCityExpansionDataProto_Builder*) builder {
  return [UserCityExpansionDataProto builder];
}
@end

@interface UserCityExpansionDataProto_Builder()
@property (retain) UserCityExpansionDataProto* result;
@end

@implementation UserCityExpansionDataProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserCityExpansionDataProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserCityExpansionDataProto_Builder*) clear {
  self.result = [[[UserCityExpansionDataProto alloc] init] autorelease];
  return self;
}
- (UserCityExpansionDataProto_Builder*) clone {
  return [UserCityExpansionDataProto builderWithPrototype:result];
}
- (UserCityExpansionDataProto*) defaultInstance {
  return [UserCityExpansionDataProto defaultInstance];
}
- (UserCityExpansionDataProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserCityExpansionDataProto*) buildPartial {
  UserCityExpansionDataProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserCityExpansionDataProto_Builder*) mergeFrom:(UserCityExpansionDataProto*) other {
  if (other == [UserCityExpansionDataProto defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasXPosition) {
    [self setXPosition:other.xPosition];
  }
  if (other.hasYPosition) {
    [self setYPosition:other.yPosition];
  }
  if (other.hasIsExpanding) {
    [self setIsExpanding:other.isExpanding];
  }
  if (other.hasExpandStartTime) {
    [self setExpandStartTime:other.expandStartTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserCityExpansionDataProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserCityExpansionDataProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 16: {
        [self setXPosition:[input readSInt32]];
        break;
      }
      case 24: {
        [self setYPosition:[input readSInt32]];
        break;
      }
      case 32: {
        [self setIsExpanding:[input readBool]];
        break;
      }
      case 40: {
        [self setExpandStartTime:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (UserCityExpansionDataProto_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (UserCityExpansionDataProto_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasXPosition {
  return result.hasXPosition;
}
- (int32_t) xPosition {
  return result.xPosition;
}
- (UserCityExpansionDataProto_Builder*) setXPosition:(int32_t) value {
  result.hasXPosition = YES;
  result.xPosition = value;
  return self;
}
- (UserCityExpansionDataProto_Builder*) clearXPosition {
  result.hasXPosition = NO;
  result.xPosition = 0;
  return self;
}
- (BOOL) hasYPosition {
  return result.hasYPosition;
}
- (int32_t) yPosition {
  return result.yPosition;
}
- (UserCityExpansionDataProto_Builder*) setYPosition:(int32_t) value {
  result.hasYPosition = YES;
  result.yPosition = value;
  return self;
}
- (UserCityExpansionDataProto_Builder*) clearYPosition {
  result.hasYPosition = NO;
  result.yPosition = 0;
  return self;
}
- (BOOL) hasIsExpanding {
  return result.hasIsExpanding;
}
- (BOOL) isExpanding {
  return result.isExpanding;
}
- (UserCityExpansionDataProto_Builder*) setIsExpanding:(BOOL) value {
  result.hasIsExpanding = YES;
  result.isExpanding = value;
  return self;
}
- (UserCityExpansionDataProto_Builder*) clearIsExpanding {
  result.hasIsExpanding = NO;
  result.isExpanding = NO;
  return self;
}
- (BOOL) hasExpandStartTime {
  return result.hasExpandStartTime;
}
- (int64_t) expandStartTime {
  return result.expandStartTime;
}
- (UserCityExpansionDataProto_Builder*) setExpandStartTime:(int64_t) value {
  result.hasExpandStartTime = YES;
  result.expandStartTime = value;
  return self;
}
- (UserCityExpansionDataProto_Builder*) clearExpandStartTime {
  result.hasExpandStartTime = NO;
  result.expandStartTime = 0L;
  return self;
}
@end

@interface CityExpansionCostProto ()
@property int32_t expansionNum;
@property int32_t expansionCostCash;
@property int32_t numMinutesToExpand;
@end

@implementation CityExpansionCostProto

- (BOOL) hasExpansionNum {
  return !!hasExpansionNum_;
}
- (void) setHasExpansionNum:(BOOL) value {
  hasExpansionNum_ = !!value;
}
@synthesize expansionNum;
- (BOOL) hasExpansionCostCash {
  return !!hasExpansionCostCash_;
}
- (void) setHasExpansionCostCash:(BOOL) value {
  hasExpansionCostCash_ = !!value;
}
@synthesize expansionCostCash;
- (BOOL) hasNumMinutesToExpand {
  return !!hasNumMinutesToExpand_;
}
- (void) setHasNumMinutesToExpand:(BOOL) value {
  hasNumMinutesToExpand_ = !!value;
}
@synthesize numMinutesToExpand;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.expansionNum = 0;
    self.expansionCostCash = 0;
    self.numMinutesToExpand = 0;
  }
  return self;
}
static CityExpansionCostProto* defaultCityExpansionCostProtoInstance = nil;
+ (void) initialize {
  if (self == [CityExpansionCostProto class]) {
    defaultCityExpansionCostProtoInstance = [[CityExpansionCostProto alloc] init];
  }
}
+ (CityExpansionCostProto*) defaultInstance {
  return defaultCityExpansionCostProtoInstance;
}
- (CityExpansionCostProto*) defaultInstance {
  return defaultCityExpansionCostProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasExpansionNum) {
    [output writeInt32:1 value:self.expansionNum];
  }
  if (self.hasExpansionCostCash) {
    [output writeInt32:2 value:self.expansionCostCash];
  }
  if (self.hasNumMinutesToExpand) {
    [output writeInt32:3 value:self.numMinutesToExpand];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasExpansionNum) {
    size += computeInt32Size(1, self.expansionNum);
  }
  if (self.hasExpansionCostCash) {
    size += computeInt32Size(2, self.expansionCostCash);
  }
  if (self.hasNumMinutesToExpand) {
    size += computeInt32Size(3, self.numMinutesToExpand);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CityExpansionCostProto*) parseFromData:(NSData*) data {
  return (CityExpansionCostProto*)[[[CityExpansionCostProto builder] mergeFromData:data] build];
}
+ (CityExpansionCostProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityExpansionCostProto*)[[[CityExpansionCostProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CityExpansionCostProto*) parseFromInputStream:(NSInputStream*) input {
  return (CityExpansionCostProto*)[[[CityExpansionCostProto builder] mergeFromInputStream:input] build];
}
+ (CityExpansionCostProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityExpansionCostProto*)[[[CityExpansionCostProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityExpansionCostProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CityExpansionCostProto*)[[[CityExpansionCostProto builder] mergeFromCodedInputStream:input] build];
}
+ (CityExpansionCostProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityExpansionCostProto*)[[[CityExpansionCostProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityExpansionCostProto_Builder*) builder {
  return [[[CityExpansionCostProto_Builder alloc] init] autorelease];
}
+ (CityExpansionCostProto_Builder*) builderWithPrototype:(CityExpansionCostProto*) prototype {
  return [[CityExpansionCostProto builder] mergeFrom:prototype];
}
- (CityExpansionCostProto_Builder*) builder {
  return [CityExpansionCostProto builder];
}
@end

@interface CityExpansionCostProto_Builder()
@property (retain) CityExpansionCostProto* result;
@end

@implementation CityExpansionCostProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CityExpansionCostProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CityExpansionCostProto_Builder*) clear {
  self.result = [[[CityExpansionCostProto alloc] init] autorelease];
  return self;
}
- (CityExpansionCostProto_Builder*) clone {
  return [CityExpansionCostProto builderWithPrototype:result];
}
- (CityExpansionCostProto*) defaultInstance {
  return [CityExpansionCostProto defaultInstance];
}
- (CityExpansionCostProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CityExpansionCostProto*) buildPartial {
  CityExpansionCostProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CityExpansionCostProto_Builder*) mergeFrom:(CityExpansionCostProto*) other {
  if (other == [CityExpansionCostProto defaultInstance]) {
    return self;
  }
  if (other.hasExpansionNum) {
    [self setExpansionNum:other.expansionNum];
  }
  if (other.hasExpansionCostCash) {
    [self setExpansionCostCash:other.expansionCostCash];
  }
  if (other.hasNumMinutesToExpand) {
    [self setNumMinutesToExpand:other.numMinutesToExpand];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CityExpansionCostProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CityExpansionCostProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setExpansionNum:[input readInt32]];
        break;
      }
      case 16: {
        [self setExpansionCostCash:[input readInt32]];
        break;
      }
      case 24: {
        [self setNumMinutesToExpand:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasExpansionNum {
  return result.hasExpansionNum;
}
- (int32_t) expansionNum {
  return result.expansionNum;
}
- (CityExpansionCostProto_Builder*) setExpansionNum:(int32_t) value {
  result.hasExpansionNum = YES;
  result.expansionNum = value;
  return self;
}
- (CityExpansionCostProto_Builder*) clearExpansionNum {
  result.hasExpansionNum = NO;
  result.expansionNum = 0;
  return self;
}
- (BOOL) hasExpansionCostCash {
  return result.hasExpansionCostCash;
}
- (int32_t) expansionCostCash {
  return result.expansionCostCash;
}
- (CityExpansionCostProto_Builder*) setExpansionCostCash:(int32_t) value {
  result.hasExpansionCostCash = YES;
  result.expansionCostCash = value;
  return self;
}
- (CityExpansionCostProto_Builder*) clearExpansionCostCash {
  result.hasExpansionCostCash = NO;
  result.expansionCostCash = 0;
  return self;
}
- (BOOL) hasNumMinutesToExpand {
  return result.hasNumMinutesToExpand;
}
- (int32_t) numMinutesToExpand {
  return result.numMinutesToExpand;
}
- (CityExpansionCostProto_Builder*) setNumMinutesToExpand:(int32_t) value {
  result.hasNumMinutesToExpand = YES;
  result.numMinutesToExpand = value;
  return self;
}
- (CityExpansionCostProto_Builder*) clearNumMinutesToExpand {
  result.hasNumMinutesToExpand = NO;
  result.numMinutesToExpand = 0;
  return self;
}
@end

@interface CityElementProto ()
@property int32_t cityId;
@property int32_t assetId;
@property CityElementProto_CityElemType type;
@property (retain) CoordinateProto* coords;
@property Float32 xLength;
@property Float32 yLength;
@property (retain) NSString* imgId;
@property StructOrientation orientation;
@property (retain) CoordinateProto* spriteCoords;
@end

@implementation CityElementProto

- (BOOL) hasCityId {
  return !!hasCityId_;
}
- (void) setHasCityId:(BOOL) value {
  hasCityId_ = !!value;
}
@synthesize cityId;
- (BOOL) hasAssetId {
  return !!hasAssetId_;
}
- (void) setHasAssetId:(BOOL) value {
  hasAssetId_ = !!value;
}
@synthesize assetId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasCoords {
  return !!hasCoords_;
}
- (void) setHasCoords:(BOOL) value {
  hasCoords_ = !!value;
}
@synthesize coords;
- (BOOL) hasXLength {
  return !!hasXLength_;
}
- (void) setHasXLength:(BOOL) value {
  hasXLength_ = !!value;
}
@synthesize xLength;
- (BOOL) hasYLength {
  return !!hasYLength_;
}
- (void) setHasYLength:(BOOL) value {
  hasYLength_ = !!value;
}
@synthesize yLength;
- (BOOL) hasImgId {
  return !!hasImgId_;
}
- (void) setHasImgId:(BOOL) value {
  hasImgId_ = !!value;
}
@synthesize imgId;
- (BOOL) hasOrientation {
  return !!hasOrientation_;
}
- (void) setHasOrientation:(BOOL) value {
  hasOrientation_ = !!value;
}
@synthesize orientation;
- (BOOL) hasSpriteCoords {
  return !!hasSpriteCoords_;
}
- (void) setHasSpriteCoords:(BOOL) value {
  hasSpriteCoords_ = !!value;
}
@synthesize spriteCoords;
- (void) dealloc {
  self.coords = nil;
  self.imgId = nil;
  self.spriteCoords = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.cityId = 0;
    self.assetId = 0;
    self.type = CityElementProto_CityElemTypeBuilding;
    self.coords = [CoordinateProto defaultInstance];
    self.xLength = 0;
    self.yLength = 0;
    self.imgId = @"";
    self.orientation = StructOrientationPosition1;
    self.spriteCoords = [CoordinateProto defaultInstance];
  }
  return self;
}
static CityElementProto* defaultCityElementProtoInstance = nil;
+ (void) initialize {
  if (self == [CityElementProto class]) {
    defaultCityElementProtoInstance = [[CityElementProto alloc] init];
  }
}
+ (CityElementProto*) defaultInstance {
  return defaultCityElementProtoInstance;
}
- (CityElementProto*) defaultInstance {
  return defaultCityElementProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCityId) {
    [output writeInt32:1 value:self.cityId];
  }
  if (self.hasAssetId) {
    [output writeInt32:2 value:self.assetId];
  }
  if (self.hasType) {
    [output writeEnum:4 value:self.type];
  }
  if (self.hasCoords) {
    [output writeMessage:5 value:self.coords];
  }
  if (self.hasXLength) {
    [output writeFloat:6 value:self.xLength];
  }
  if (self.hasYLength) {
    [output writeFloat:7 value:self.yLength];
  }
  if (self.hasImgId) {
    [output writeString:8 value:self.imgId];
  }
  if (self.hasOrientation) {
    [output writeEnum:9 value:self.orientation];
  }
  if (self.hasSpriteCoords) {
    [output writeMessage:10 value:self.spriteCoords];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCityId) {
    size += computeInt32Size(1, self.cityId);
  }
  if (self.hasAssetId) {
    size += computeInt32Size(2, self.assetId);
  }
  if (self.hasType) {
    size += computeEnumSize(4, self.type);
  }
  if (self.hasCoords) {
    size += computeMessageSize(5, self.coords);
  }
  if (self.hasXLength) {
    size += computeFloatSize(6, self.xLength);
  }
  if (self.hasYLength) {
    size += computeFloatSize(7, self.yLength);
  }
  if (self.hasImgId) {
    size += computeStringSize(8, self.imgId);
  }
  if (self.hasOrientation) {
    size += computeEnumSize(9, self.orientation);
  }
  if (self.hasSpriteCoords) {
    size += computeMessageSize(10, self.spriteCoords);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (CityElementProto*) parseFromData:(NSData*) data {
  return (CityElementProto*)[[[CityElementProto builder] mergeFromData:data] build];
}
+ (CityElementProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityElementProto*)[[[CityElementProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CityElementProto*) parseFromInputStream:(NSInputStream*) input {
  return (CityElementProto*)[[[CityElementProto builder] mergeFromInputStream:input] build];
}
+ (CityElementProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityElementProto*)[[[CityElementProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityElementProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CityElementProto*)[[[CityElementProto builder] mergeFromCodedInputStream:input] build];
}
+ (CityElementProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CityElementProto*)[[[CityElementProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityElementProto_Builder*) builder {
  return [[[CityElementProto_Builder alloc] init] autorelease];
}
+ (CityElementProto_Builder*) builderWithPrototype:(CityElementProto*) prototype {
  return [[CityElementProto builder] mergeFrom:prototype];
}
- (CityElementProto_Builder*) builder {
  return [CityElementProto builder];
}
@end

BOOL CityElementProto_CityElemTypeIsValidValue(CityElementProto_CityElemType value) {
  switch (value) {
    case CityElementProto_CityElemTypeBuilding:
    case CityElementProto_CityElemTypeDecoration:
    case CityElementProto_CityElemTypePersonNeutralEnemy:
    case CityElementProto_CityElemTypeBoss:
      return YES;
    default:
      return NO;
  }
}
@interface CityElementProto_Builder()
@property (retain) CityElementProto* result;
@end

@implementation CityElementProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CityElementProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CityElementProto_Builder*) clear {
  self.result = [[[CityElementProto alloc] init] autorelease];
  return self;
}
- (CityElementProto_Builder*) clone {
  return [CityElementProto builderWithPrototype:result];
}
- (CityElementProto*) defaultInstance {
  return [CityElementProto defaultInstance];
}
- (CityElementProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CityElementProto*) buildPartial {
  CityElementProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CityElementProto_Builder*) mergeFrom:(CityElementProto*) other {
  if (other == [CityElementProto defaultInstance]) {
    return self;
  }
  if (other.hasCityId) {
    [self setCityId:other.cityId];
  }
  if (other.hasAssetId) {
    [self setAssetId:other.assetId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasCoords) {
    [self mergeCoords:other.coords];
  }
  if (other.hasXLength) {
    [self setXLength:other.xLength];
  }
  if (other.hasYLength) {
    [self setYLength:other.yLength];
  }
  if (other.hasImgId) {
    [self setImgId:other.imgId];
  }
  if (other.hasOrientation) {
    [self setOrientation:other.orientation];
  }
  if (other.hasSpriteCoords) {
    [self mergeSpriteCoords:other.spriteCoords];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CityElementProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CityElementProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCityId:[input readInt32]];
        break;
      }
      case 16: {
        [self setAssetId:[input readInt32]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (CityElementProto_CityElemTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 42: {
        CoordinateProto_Builder* subBuilder = [CoordinateProto builder];
        if (self.hasCoords) {
          [subBuilder mergeFrom:self.coords];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCoords:[subBuilder buildPartial]];
        break;
      }
      case 53: {
        [self setXLength:[input readFloat]];
        break;
      }
      case 61: {
        [self setYLength:[input readFloat]];
        break;
      }
      case 66: {
        [self setImgId:[input readString]];
        break;
      }
      case 72: {
        int32_t value = [input readEnum];
        if (StructOrientationIsValidValue(value)) {
          [self setOrientation:value];
        } else {
          [unknownFields mergeVarintField:9 value:value];
        }
        break;
      }
      case 82: {
        CoordinateProto_Builder* subBuilder = [CoordinateProto builder];
        if (self.hasSpriteCoords) {
          [subBuilder mergeFrom:self.spriteCoords];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSpriteCoords:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCityId {
  return result.hasCityId;
}
- (int32_t) cityId {
  return result.cityId;
}
- (CityElementProto_Builder*) setCityId:(int32_t) value {
  result.hasCityId = YES;
  result.cityId = value;
  return self;
}
- (CityElementProto_Builder*) clearCityId {
  result.hasCityId = NO;
  result.cityId = 0;
  return self;
}
- (BOOL) hasAssetId {
  return result.hasAssetId;
}
- (int32_t) assetId {
  return result.assetId;
}
- (CityElementProto_Builder*) setAssetId:(int32_t) value {
  result.hasAssetId = YES;
  result.assetId = value;
  return self;
}
- (CityElementProto_Builder*) clearAssetId {
  result.hasAssetId = NO;
  result.assetId = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (CityElementProto_CityElemType) type {
  return result.type;
}
- (CityElementProto_Builder*) setType:(CityElementProto_CityElemType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (CityElementProto_Builder*) clearType {
  result.hasType = NO;
  result.type = CityElementProto_CityElemTypeBuilding;
  return self;
}
- (BOOL) hasCoords {
  return result.hasCoords;
}
- (CoordinateProto*) coords {
  return result.coords;
}
- (CityElementProto_Builder*) setCoords:(CoordinateProto*) value {
  result.hasCoords = YES;
  result.coords = value;
  return self;
}
- (CityElementProto_Builder*) setCoordsBuilder:(CoordinateProto_Builder*) builderForValue {
  return [self setCoords:[builderForValue build]];
}
- (CityElementProto_Builder*) mergeCoords:(CoordinateProto*) value {
  if (result.hasCoords &&
      result.coords != [CoordinateProto defaultInstance]) {
    result.coords =
      [[[CoordinateProto builderWithPrototype:result.coords] mergeFrom:value] buildPartial];
  } else {
    result.coords = value;
  }
  result.hasCoords = YES;
  return self;
}
- (CityElementProto_Builder*) clearCoords {
  result.hasCoords = NO;
  result.coords = [CoordinateProto defaultInstance];
  return self;
}
- (BOOL) hasXLength {
  return result.hasXLength;
}
- (Float32) xLength {
  return result.xLength;
}
- (CityElementProto_Builder*) setXLength:(Float32) value {
  result.hasXLength = YES;
  result.xLength = value;
  return self;
}
- (CityElementProto_Builder*) clearXLength {
  result.hasXLength = NO;
  result.xLength = 0;
  return self;
}
- (BOOL) hasYLength {
  return result.hasYLength;
}
- (Float32) yLength {
  return result.yLength;
}
- (CityElementProto_Builder*) setYLength:(Float32) value {
  result.hasYLength = YES;
  result.yLength = value;
  return self;
}
- (CityElementProto_Builder*) clearYLength {
  result.hasYLength = NO;
  result.yLength = 0;
  return self;
}
- (BOOL) hasImgId {
  return result.hasImgId;
}
- (NSString*) imgId {
  return result.imgId;
}
- (CityElementProto_Builder*) setImgId:(NSString*) value {
  result.hasImgId = YES;
  result.imgId = value;
  return self;
}
- (CityElementProto_Builder*) clearImgId {
  result.hasImgId = NO;
  result.imgId = @"";
  return self;
}
- (BOOL) hasOrientation {
  return result.hasOrientation;
}
- (StructOrientation) orientation {
  return result.orientation;
}
- (CityElementProto_Builder*) setOrientation:(StructOrientation) value {
  result.hasOrientation = YES;
  result.orientation = value;
  return self;
}
- (CityElementProto_Builder*) clearOrientation {
  result.hasOrientation = NO;
  result.orientation = StructOrientationPosition1;
  return self;
}
- (BOOL) hasSpriteCoords {
  return result.hasSpriteCoords;
}
- (CoordinateProto*) spriteCoords {
  return result.spriteCoords;
}
- (CityElementProto_Builder*) setSpriteCoords:(CoordinateProto*) value {
  result.hasSpriteCoords = YES;
  result.spriteCoords = value;
  return self;
}
- (CityElementProto_Builder*) setSpriteCoordsBuilder:(CoordinateProto_Builder*) builderForValue {
  return [self setSpriteCoords:[builderForValue build]];
}
- (CityElementProto_Builder*) mergeSpriteCoords:(CoordinateProto*) value {
  if (result.hasSpriteCoords &&
      result.spriteCoords != [CoordinateProto defaultInstance]) {
    result.spriteCoords =
      [[[CoordinateProto builderWithPrototype:result.spriteCoords] mergeFrom:value] buildPartial];
  } else {
    result.spriteCoords = value;
  }
  result.hasSpriteCoords = YES;
  return self;
}
- (CityElementProto_Builder*) clearSpriteCoords {
  result.hasSpriteCoords = NO;
  result.spriteCoords = [CoordinateProto defaultInstance];
  return self;
}
@end

@interface FullCityProto ()
@property int32_t cityId;
@property (retain) NSString* name;
@property (retain) NSString* mapImgName;
@property (retain) CoordinateProto* center;
@property (retain) NSString* roadImgName;
@property (retain) NSString* mapTmxName;
@property (retain) CoordinateProto* roadImgCoords;
@property (retain) NSMutableArray* mutableTaskIdsList;
@property (retain) NSString* attackMapLabelImgName;
@end

@implementation FullCityProto

- (BOOL) hasCityId {
  return !!hasCityId_;
}
- (void) setHasCityId:(BOOL) value {
  hasCityId_ = !!value;
}
@synthesize cityId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasMapImgName {
  return !!hasMapImgName_;
}
- (void) setHasMapImgName:(BOOL) value {
  hasMapImgName_ = !!value;
}
@synthesize mapImgName;
- (BOOL) hasCenter {
  return !!hasCenter_;
}
- (void) setHasCenter:(BOOL) value {
  hasCenter_ = !!value;
}
@synthesize center;
- (BOOL) hasRoadImgName {
  return !!hasRoadImgName_;
}
- (void) setHasRoadImgName:(BOOL) value {
  hasRoadImgName_ = !!value;
}
@synthesize roadImgName;
- (BOOL) hasMapTmxName {
  return !!hasMapTmxName_;
}
- (void) setHasMapTmxName:(BOOL) value {
  hasMapTmxName_ = !!value;
}
@synthesize mapTmxName;
- (BOOL) hasRoadImgCoords {
  return !!hasRoadImgCoords_;
}
- (void) setHasRoadImgCoords:(BOOL) value {
  hasRoadImgCoords_ = !!value;
}
@synthesize roadImgCoords;
@synthesize mutableTaskIdsList;
- (BOOL) hasAttackMapLabelImgName {
  return !!hasAttackMapLabelImgName_;
}
- (void) setHasAttackMapLabelImgName:(BOOL) value {
  hasAttackMapLabelImgName_ = !!value;
}
@synthesize attackMapLabelImgName;
- (void) dealloc {
  self.name = nil;
  self.mapImgName = nil;
  self.center = nil;
  self.roadImgName = nil;
  self.mapTmxName = nil;
  self.roadImgCoords = nil;
  self.mutableTaskIdsList = nil;
  self.attackMapLabelImgName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.cityId = 0;
    self.name = @"";
    self.mapImgName = @"";
    self.center = [CoordinateProto defaultInstance];
    self.roadImgName = @"";
    self.mapTmxName = @"";
    self.roadImgCoords = [CoordinateProto defaultInstance];
    self.attackMapLabelImgName = @"";
  }
  return self;
}
static FullCityProto* defaultFullCityProtoInstance = nil;
+ (void) initialize {
  if (self == [FullCityProto class]) {
    defaultFullCityProtoInstance = [[FullCityProto alloc] init];
  }
}
+ (FullCityProto*) defaultInstance {
  return defaultFullCityProtoInstance;
}
- (FullCityProto*) defaultInstance {
  return defaultFullCityProtoInstance;
}
- (NSArray*) taskIdsList {
  return mutableTaskIdsList;
}
- (int32_t) taskIdsAtIndex:(int32_t) index {
  id value = [mutableTaskIdsList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCityId) {
    [output writeInt32:1 value:self.cityId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasMapImgName) {
    [output writeString:3 value:self.mapImgName];
  }
  if (self.hasCenter) {
    [output writeMessage:4 value:self.center];
  }
  if (self.hasRoadImgName) {
    [output writeString:5 value:self.roadImgName];
  }
  if (self.hasMapTmxName) {
    [output writeString:6 value:self.mapTmxName];
  }
  if (self.hasRoadImgCoords) {
    [output writeMessage:7 value:self.roadImgCoords];
  }
  for (NSNumber* value in self.mutableTaskIdsList) {
    [output writeInt32:8 value:[value intValue]];
  }
  if (self.hasAttackMapLabelImgName) {
    [output writeString:9 value:self.attackMapLabelImgName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCityId) {
    size += computeInt32Size(1, self.cityId);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  if (self.hasMapImgName) {
    size += computeStringSize(3, self.mapImgName);
  }
  if (self.hasCenter) {
    size += computeMessageSize(4, self.center);
  }
  if (self.hasRoadImgName) {
    size += computeStringSize(5, self.roadImgName);
  }
  if (self.hasMapTmxName) {
    size += computeStringSize(6, self.mapTmxName);
  }
  if (self.hasRoadImgCoords) {
    size += computeMessageSize(7, self.roadImgCoords);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableTaskIdsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    size += 1 * self.mutableTaskIdsList.count;
  }
  if (self.hasAttackMapLabelImgName) {
    size += computeStringSize(9, self.attackMapLabelImgName);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FullCityProto*) parseFromData:(NSData*) data {
  return (FullCityProto*)[[[FullCityProto builder] mergeFromData:data] build];
}
+ (FullCityProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullCityProto*)[[[FullCityProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FullCityProto*) parseFromInputStream:(NSInputStream*) input {
  return (FullCityProto*)[[[FullCityProto builder] mergeFromInputStream:input] build];
}
+ (FullCityProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullCityProto*)[[[FullCityProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullCityProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FullCityProto*)[[[FullCityProto builder] mergeFromCodedInputStream:input] build];
}
+ (FullCityProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullCityProto*)[[[FullCityProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullCityProto_Builder*) builder {
  return [[[FullCityProto_Builder alloc] init] autorelease];
}
+ (FullCityProto_Builder*) builderWithPrototype:(FullCityProto*) prototype {
  return [[FullCityProto builder] mergeFrom:prototype];
}
- (FullCityProto_Builder*) builder {
  return [FullCityProto builder];
}
@end

@interface FullCityProto_Builder()
@property (retain) FullCityProto* result;
@end

@implementation FullCityProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FullCityProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FullCityProto_Builder*) clear {
  self.result = [[[FullCityProto alloc] init] autorelease];
  return self;
}
- (FullCityProto_Builder*) clone {
  return [FullCityProto builderWithPrototype:result];
}
- (FullCityProto*) defaultInstance {
  return [FullCityProto defaultInstance];
}
- (FullCityProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FullCityProto*) buildPartial {
  FullCityProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FullCityProto_Builder*) mergeFrom:(FullCityProto*) other {
  if (other == [FullCityProto defaultInstance]) {
    return self;
  }
  if (other.hasCityId) {
    [self setCityId:other.cityId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasMapImgName) {
    [self setMapImgName:other.mapImgName];
  }
  if (other.hasCenter) {
    [self mergeCenter:other.center];
  }
  if (other.hasRoadImgName) {
    [self setRoadImgName:other.roadImgName];
  }
  if (other.hasMapTmxName) {
    [self setMapTmxName:other.mapTmxName];
  }
  if (other.hasRoadImgCoords) {
    [self mergeRoadImgCoords:other.roadImgCoords];
  }
  if (other.mutableTaskIdsList.count > 0) {
    if (result.mutableTaskIdsList == nil) {
      result.mutableTaskIdsList = [NSMutableArray array];
    }
    [result.mutableTaskIdsList addObjectsFromArray:other.mutableTaskIdsList];
  }
  if (other.hasAttackMapLabelImgName) {
    [self setAttackMapLabelImgName:other.attackMapLabelImgName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FullCityProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FullCityProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCityId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setMapImgName:[input readString]];
        break;
      }
      case 34: {
        CoordinateProto_Builder* subBuilder = [CoordinateProto builder];
        if (self.hasCenter) {
          [subBuilder mergeFrom:self.center];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCenter:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setRoadImgName:[input readString]];
        break;
      }
      case 50: {
        [self setMapTmxName:[input readString]];
        break;
      }
      case 58: {
        CoordinateProto_Builder* subBuilder = [CoordinateProto builder];
        if (self.hasRoadImgCoords) {
          [subBuilder mergeFrom:self.roadImgCoords];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoadImgCoords:[subBuilder buildPartial]];
        break;
      }
      case 64: {
        [self addTaskIds:[input readInt32]];
        break;
      }
      case 74: {
        [self setAttackMapLabelImgName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCityId {
  return result.hasCityId;
}
- (int32_t) cityId {
  return result.cityId;
}
- (FullCityProto_Builder*) setCityId:(int32_t) value {
  result.hasCityId = YES;
  result.cityId = value;
  return self;
}
- (FullCityProto_Builder*) clearCityId {
  result.hasCityId = NO;
  result.cityId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (FullCityProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (FullCityProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasMapImgName {
  return result.hasMapImgName;
}
- (NSString*) mapImgName {
  return result.mapImgName;
}
- (FullCityProto_Builder*) setMapImgName:(NSString*) value {
  result.hasMapImgName = YES;
  result.mapImgName = value;
  return self;
}
- (FullCityProto_Builder*) clearMapImgName {
  result.hasMapImgName = NO;
  result.mapImgName = @"";
  return self;
}
- (BOOL) hasCenter {
  return result.hasCenter;
}
- (CoordinateProto*) center {
  return result.center;
}
- (FullCityProto_Builder*) setCenter:(CoordinateProto*) value {
  result.hasCenter = YES;
  result.center = value;
  return self;
}
- (FullCityProto_Builder*) setCenterBuilder:(CoordinateProto_Builder*) builderForValue {
  return [self setCenter:[builderForValue build]];
}
- (FullCityProto_Builder*) mergeCenter:(CoordinateProto*) value {
  if (result.hasCenter &&
      result.center != [CoordinateProto defaultInstance]) {
    result.center =
      [[[CoordinateProto builderWithPrototype:result.center] mergeFrom:value] buildPartial];
  } else {
    result.center = value;
  }
  result.hasCenter = YES;
  return self;
}
- (FullCityProto_Builder*) clearCenter {
  result.hasCenter = NO;
  result.center = [CoordinateProto defaultInstance];
  return self;
}
- (BOOL) hasRoadImgName {
  return result.hasRoadImgName;
}
- (NSString*) roadImgName {
  return result.roadImgName;
}
- (FullCityProto_Builder*) setRoadImgName:(NSString*) value {
  result.hasRoadImgName = YES;
  result.roadImgName = value;
  return self;
}
- (FullCityProto_Builder*) clearRoadImgName {
  result.hasRoadImgName = NO;
  result.roadImgName = @"";
  return self;
}
- (BOOL) hasMapTmxName {
  return result.hasMapTmxName;
}
- (NSString*) mapTmxName {
  return result.mapTmxName;
}
- (FullCityProto_Builder*) setMapTmxName:(NSString*) value {
  result.hasMapTmxName = YES;
  result.mapTmxName = value;
  return self;
}
- (FullCityProto_Builder*) clearMapTmxName {
  result.hasMapTmxName = NO;
  result.mapTmxName = @"";
  return self;
}
- (BOOL) hasRoadImgCoords {
  return result.hasRoadImgCoords;
}
- (CoordinateProto*) roadImgCoords {
  return result.roadImgCoords;
}
- (FullCityProto_Builder*) setRoadImgCoords:(CoordinateProto*) value {
  result.hasRoadImgCoords = YES;
  result.roadImgCoords = value;
  return self;
}
- (FullCityProto_Builder*) setRoadImgCoordsBuilder:(CoordinateProto_Builder*) builderForValue {
  return [self setRoadImgCoords:[builderForValue build]];
}
- (FullCityProto_Builder*) mergeRoadImgCoords:(CoordinateProto*) value {
  if (result.hasRoadImgCoords &&
      result.roadImgCoords != [CoordinateProto defaultInstance]) {
    result.roadImgCoords =
      [[[CoordinateProto builderWithPrototype:result.roadImgCoords] mergeFrom:value] buildPartial];
  } else {
    result.roadImgCoords = value;
  }
  result.hasRoadImgCoords = YES;
  return self;
}
- (FullCityProto_Builder*) clearRoadImgCoords {
  result.hasRoadImgCoords = NO;
  result.roadImgCoords = [CoordinateProto defaultInstance];
  return self;
}
- (NSArray*) taskIdsList {
  if (result.mutableTaskIdsList == nil) {
    return [NSArray array];
  }
  return result.mutableTaskIdsList;
}
- (int32_t) taskIdsAtIndex:(int32_t) index {
  return [result taskIdsAtIndex:index];
}
- (FullCityProto_Builder*) replaceTaskIdsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableTaskIdsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (FullCityProto_Builder*) addTaskIds:(int32_t) value {
  if (result.mutableTaskIdsList == nil) {
    result.mutableTaskIdsList = [NSMutableArray array];
  }
  [result.mutableTaskIdsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (FullCityProto_Builder*) addAllTaskIds:(NSArray*) values {
  if (result.mutableTaskIdsList == nil) {
    result.mutableTaskIdsList = [NSMutableArray array];
  }
  [result.mutableTaskIdsList addObjectsFromArray:values];
  return self;
}
- (FullCityProto_Builder*) clearTaskIdsList {
  result.mutableTaskIdsList = nil;
  return self;
}
- (BOOL) hasAttackMapLabelImgName {
  return result.hasAttackMapLabelImgName;
}
- (NSString*) attackMapLabelImgName {
  return result.attackMapLabelImgName;
}
- (FullCityProto_Builder*) setAttackMapLabelImgName:(NSString*) value {
  result.hasAttackMapLabelImgName = YES;
  result.attackMapLabelImgName = value;
  return self;
}
- (FullCityProto_Builder*) clearAttackMapLabelImgName {
  result.hasAttackMapLabelImgName = NO;
  result.attackMapLabelImgName = @"";
  return self;
}
@end

