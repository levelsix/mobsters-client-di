// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "StaticData.pb.h"

@implementation StaticDataRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [StaticDataRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [AchievementStuffRoot registerAllExtensions:registry];
    [BattleRoot registerAllExtensions:registry];
    [BoosterPackStuffRoot registerAllExtensions:registry];
    [CityRoot registerAllExtensions:registry];
    [ClanRoot registerAllExtensions:registry];
    [MonsterStuffRoot registerAllExtensions:registry];
    [QuestRoot registerAllExtensions:registry];
    [StructureRoot registerAllExtensions:registry];
    [TaskRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface StaticDataProto ()
@property (retain) MinimumUserProto* sender;
@property (retain) NSMutableArray* mutableExpansionCostsList;
@property (retain) NSMutableArray* mutableAllCitiesList;
@property (retain) NSMutableArray* mutableAllTasksList;
@property (retain) NSMutableArray* mutableAllMonstersList;
@property (retain) NSMutableArray* mutableSlipList;
@property (retain) NSMutableArray* mutableInProgressQuestsList;
@property (retain) NSMutableArray* mutableUnredeemedQuestsList;
@property (retain) NSMutableArray* mutableAvailableQuestsList;
@property (retain) NSMutableArray* mutableBoosterPacksList;
@property (retain) NSMutableArray* mutableAllGeneratorsList;
@property (retain) NSMutableArray* mutableAllStoragesList;
@property (retain) NSMutableArray* mutableAllHospitalsList;
@property (retain) NSMutableArray* mutableAllResidencesList;
@property (retain) NSMutableArray* mutableAllLabsList;
@property (retain) NSMutableArray* mutableAllTownHallsList;
@property (retain) NSMutableArray* mutableAllMiniJobCentersList;
@property (retain) NSMutableArray* mutablePersistentEventsList;
@property (retain) NSMutableArray* mutableMbdsList;
@property (retain) NSMutableArray* mutableRaidsList;
@property (retain) NSMutableArray* mutablePersistentClanEventsList;
@property (retain) NSMutableArray* mutableItemsList;
@property (retain) NSMutableArray* mutableObstaclesList;
@property (retain) NSMutableArray* mutableClanIconsList;
@property (retain) NSMutableArray* mutableLeaguesList;
@property (retain) NSMutableArray* mutableAchievementsList;
@end

@implementation StaticDataProto

- (BOOL) hasSender {
  return !!hasSender_;
}
- (void) setHasSender:(BOOL) value {
  hasSender_ = !!value;
}
@synthesize sender;
@synthesize mutableExpansionCostsList;
@synthesize mutableAllCitiesList;
@synthesize mutableAllTasksList;
@synthesize mutableAllMonstersList;
@synthesize mutableSlipList;
@synthesize mutableInProgressQuestsList;
@synthesize mutableUnredeemedQuestsList;
@synthesize mutableAvailableQuestsList;
@synthesize mutableBoosterPacksList;
@synthesize mutableAllGeneratorsList;
@synthesize mutableAllStoragesList;
@synthesize mutableAllHospitalsList;
@synthesize mutableAllResidencesList;
@synthesize mutableAllLabsList;
@synthesize mutableAllTownHallsList;
@synthesize mutableAllMiniJobCentersList;
@synthesize mutablePersistentEventsList;
@synthesize mutableMbdsList;
@synthesize mutableRaidsList;
@synthesize mutablePersistentClanEventsList;
@synthesize mutableItemsList;
@synthesize mutableObstaclesList;
@synthesize mutableClanIconsList;
@synthesize mutableLeaguesList;
@synthesize mutableAchievementsList;
- (void) dealloc {
  self.sender = nil;
  self.mutableExpansionCostsList = nil;
  self.mutableAllCitiesList = nil;
  self.mutableAllTasksList = nil;
  self.mutableAllMonstersList = nil;
  self.mutableSlipList = nil;
  self.mutableInProgressQuestsList = nil;
  self.mutableUnredeemedQuestsList = nil;
  self.mutableAvailableQuestsList = nil;
  self.mutableBoosterPacksList = nil;
  self.mutableAllGeneratorsList = nil;
  self.mutableAllStoragesList = nil;
  self.mutableAllHospitalsList = nil;
  self.mutableAllResidencesList = nil;
  self.mutableAllLabsList = nil;
  self.mutableAllTownHallsList = nil;
  self.mutableAllMiniJobCentersList = nil;
  self.mutablePersistentEventsList = nil;
  self.mutableMbdsList = nil;
  self.mutableRaidsList = nil;
  self.mutablePersistentClanEventsList = nil;
  self.mutableItemsList = nil;
  self.mutableObstaclesList = nil;
  self.mutableClanIconsList = nil;
  self.mutableLeaguesList = nil;
  self.mutableAchievementsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.sender = [MinimumUserProto defaultInstance];
  }
  return self;
}
static StaticDataProto* defaultStaticDataProtoInstance = nil;
+ (void) initialize {
  if (self == [StaticDataProto class]) {
    defaultStaticDataProtoInstance = [[StaticDataProto alloc] init];
  }
}
+ (StaticDataProto*) defaultInstance {
  return defaultStaticDataProtoInstance;
}
- (StaticDataProto*) defaultInstance {
  return defaultStaticDataProtoInstance;
}
- (NSArray*) expansionCostsList {
  return mutableExpansionCostsList;
}
- (CityExpansionCostProto*) expansionCostsAtIndex:(int32_t) index {
  id value = [mutableExpansionCostsList objectAtIndex:index];
  return value;
}
- (NSArray*) allCitiesList {
  return mutableAllCitiesList;
}
- (FullCityProto*) allCitiesAtIndex:(int32_t) index {
  id value = [mutableAllCitiesList objectAtIndex:index];
  return value;
}
- (NSArray*) allTasksList {
  return mutableAllTasksList;
}
- (FullTaskProto*) allTasksAtIndex:(int32_t) index {
  id value = [mutableAllTasksList objectAtIndex:index];
  return value;
}
- (NSArray*) allMonstersList {
  return mutableAllMonstersList;
}
- (MonsterProto*) allMonstersAtIndex:(int32_t) index {
  id value = [mutableAllMonstersList objectAtIndex:index];
  return value;
}
- (NSArray*) slipList {
  return mutableSlipList;
}
- (StaticUserLevelInfoProto*) slipAtIndex:(int32_t) index {
  id value = [mutableSlipList objectAtIndex:index];
  return value;
}
- (NSArray*) inProgressQuestsList {
  return mutableInProgressQuestsList;
}
- (FullQuestProto*) inProgressQuestsAtIndex:(int32_t) index {
  id value = [mutableInProgressQuestsList objectAtIndex:index];
  return value;
}
- (NSArray*) unredeemedQuestsList {
  return mutableUnredeemedQuestsList;
}
- (FullQuestProto*) unredeemedQuestsAtIndex:(int32_t) index {
  id value = [mutableUnredeemedQuestsList objectAtIndex:index];
  return value;
}
- (NSArray*) availableQuestsList {
  return mutableAvailableQuestsList;
}
- (FullQuestProto*) availableQuestsAtIndex:(int32_t) index {
  id value = [mutableAvailableQuestsList objectAtIndex:index];
  return value;
}
- (NSArray*) boosterPacksList {
  return mutableBoosterPacksList;
}
- (BoosterPackProto*) boosterPacksAtIndex:(int32_t) index {
  id value = [mutableBoosterPacksList objectAtIndex:index];
  return value;
}
- (NSArray*) allGeneratorsList {
  return mutableAllGeneratorsList;
}
- (ResourceGeneratorProto*) allGeneratorsAtIndex:(int32_t) index {
  id value = [mutableAllGeneratorsList objectAtIndex:index];
  return value;
}
- (NSArray*) allStoragesList {
  return mutableAllStoragesList;
}
- (ResourceStorageProto*) allStoragesAtIndex:(int32_t) index {
  id value = [mutableAllStoragesList objectAtIndex:index];
  return value;
}
- (NSArray*) allHospitalsList {
  return mutableAllHospitalsList;
}
- (HospitalProto*) allHospitalsAtIndex:(int32_t) index {
  id value = [mutableAllHospitalsList objectAtIndex:index];
  return value;
}
- (NSArray*) allResidencesList {
  return mutableAllResidencesList;
}
- (ResidenceProto*) allResidencesAtIndex:(int32_t) index {
  id value = [mutableAllResidencesList objectAtIndex:index];
  return value;
}
- (NSArray*) allLabsList {
  return mutableAllLabsList;
}
- (LabProto*) allLabsAtIndex:(int32_t) index {
  id value = [mutableAllLabsList objectAtIndex:index];
  return value;
}
- (NSArray*) allTownHallsList {
  return mutableAllTownHallsList;
}
- (TownHallProto*) allTownHallsAtIndex:(int32_t) index {
  id value = [mutableAllTownHallsList objectAtIndex:index];
  return value;
}
- (NSArray*) allMiniJobCentersList {
  return mutableAllMiniJobCentersList;
}
- (MiniJobCenterProto*) allMiniJobCentersAtIndex:(int32_t) index {
  id value = [mutableAllMiniJobCentersList objectAtIndex:index];
  return value;
}
- (NSArray*) persistentEventsList {
  return mutablePersistentEventsList;
}
- (PersistentEventProto*) persistentEventsAtIndex:(int32_t) index {
  id value = [mutablePersistentEventsList objectAtIndex:index];
  return value;
}
- (NSArray*) mbdsList {
  return mutableMbdsList;
}
- (MonsterBattleDialogueProto*) mbdsAtIndex:(int32_t) index {
  id value = [mutableMbdsList objectAtIndex:index];
  return value;
}
- (NSArray*) raidsList {
  return mutableRaidsList;
}
- (ClanRaidProto*) raidsAtIndex:(int32_t) index {
  id value = [mutableRaidsList objectAtIndex:index];
  return value;
}
- (NSArray*) persistentClanEventsList {
  return mutablePersistentClanEventsList;
}
- (PersistentClanEventProto*) persistentClanEventsAtIndex:(int32_t) index {
  id value = [mutablePersistentClanEventsList objectAtIndex:index];
  return value;
}
- (NSArray*) itemsList {
  return mutableItemsList;
}
- (ItemProto*) itemsAtIndex:(int32_t) index {
  id value = [mutableItemsList objectAtIndex:index];
  return value;
}
- (NSArray*) obstaclesList {
  return mutableObstaclesList;
}
- (ObstacleProto*) obstaclesAtIndex:(int32_t) index {
  id value = [mutableObstaclesList objectAtIndex:index];
  return value;
}
- (NSArray*) clanIconsList {
  return mutableClanIconsList;
}
- (ClanIconProto*) clanIconsAtIndex:(int32_t) index {
  id value = [mutableClanIconsList objectAtIndex:index];
  return value;
}
- (NSArray*) leaguesList {
  return mutableLeaguesList;
}
- (PvpLeagueProto*) leaguesAtIndex:(int32_t) index {
  id value = [mutableLeaguesList objectAtIndex:index];
  return value;
}
- (NSArray*) achievementsList {
  return mutableAchievementsList;
}
- (AchievementProto*) achievementsAtIndex:(int32_t) index {
  id value = [mutableAchievementsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSender) {
    [output writeMessage:1 value:self.sender];
  }
  for (CityExpansionCostProto* element in self.expansionCostsList) {
    [output writeMessage:2 value:element];
  }
  for (FullCityProto* element in self.allCitiesList) {
    [output writeMessage:3 value:element];
  }
  for (FullTaskProto* element in self.allTasksList) {
    [output writeMessage:4 value:element];
  }
  for (MonsterProto* element in self.allMonstersList) {
    [output writeMessage:5 value:element];
  }
  for (StaticUserLevelInfoProto* element in self.slipList) {
    [output writeMessage:6 value:element];
  }
  for (FullQuestProto* element in self.inProgressQuestsList) {
    [output writeMessage:7 value:element];
  }
  for (FullQuestProto* element in self.unredeemedQuestsList) {
    [output writeMessage:8 value:element];
  }
  for (FullQuestProto* element in self.availableQuestsList) {
    [output writeMessage:9 value:element];
  }
  for (BoosterPackProto* element in self.boosterPacksList) {
    [output writeMessage:11 value:element];
  }
  for (ResourceGeneratorProto* element in self.allGeneratorsList) {
    [output writeMessage:12 value:element];
  }
  for (ResourceStorageProto* element in self.allStoragesList) {
    [output writeMessage:13 value:element];
  }
  for (HospitalProto* element in self.allHospitalsList) {
    [output writeMessage:14 value:element];
  }
  for (ResidenceProto* element in self.allResidencesList) {
    [output writeMessage:15 value:element];
  }
  for (TownHallProto* element in self.allTownHallsList) {
    [output writeMessage:16 value:element];
  }
  for (LabProto* element in self.allLabsList) {
    [output writeMessage:17 value:element];
  }
  for (PersistentEventProto* element in self.persistentEventsList) {
    [output writeMessage:18 value:element];
  }
  for (MonsterBattleDialogueProto* element in self.mbdsList) {
    [output writeMessage:19 value:element];
  }
  for (ClanRaidProto* element in self.raidsList) {
    [output writeMessage:20 value:element];
  }
  for (PersistentClanEventProto* element in self.persistentClanEventsList) {
    [output writeMessage:21 value:element];
  }
  for (ItemProto* element in self.itemsList) {
    [output writeMessage:22 value:element];
  }
  for (ObstacleProto* element in self.obstaclesList) {
    [output writeMessage:23 value:element];
  }
  for (ClanIconProto* element in self.clanIconsList) {
    [output writeMessage:24 value:element];
  }
  for (PvpLeagueProto* element in self.leaguesList) {
    [output writeMessage:25 value:element];
  }
  for (AchievementProto* element in self.achievementsList) {
    [output writeMessage:26 value:element];
  }
  for (MiniJobCenterProto* element in self.allMiniJobCentersList) {
    [output writeMessage:27 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSender) {
    size += computeMessageSize(1, self.sender);
  }
  for (CityExpansionCostProto* element in self.expansionCostsList) {
    size += computeMessageSize(2, element);
  }
  for (FullCityProto* element in self.allCitiesList) {
    size += computeMessageSize(3, element);
  }
  for (FullTaskProto* element in self.allTasksList) {
    size += computeMessageSize(4, element);
  }
  for (MonsterProto* element in self.allMonstersList) {
    size += computeMessageSize(5, element);
  }
  for (StaticUserLevelInfoProto* element in self.slipList) {
    size += computeMessageSize(6, element);
  }
  for (FullQuestProto* element in self.inProgressQuestsList) {
    size += computeMessageSize(7, element);
  }
  for (FullQuestProto* element in self.unredeemedQuestsList) {
    size += computeMessageSize(8, element);
  }
  for (FullQuestProto* element in self.availableQuestsList) {
    size += computeMessageSize(9, element);
  }
  for (BoosterPackProto* element in self.boosterPacksList) {
    size += computeMessageSize(11, element);
  }
  for (ResourceGeneratorProto* element in self.allGeneratorsList) {
    size += computeMessageSize(12, element);
  }
  for (ResourceStorageProto* element in self.allStoragesList) {
    size += computeMessageSize(13, element);
  }
  for (HospitalProto* element in self.allHospitalsList) {
    size += computeMessageSize(14, element);
  }
  for (ResidenceProto* element in self.allResidencesList) {
    size += computeMessageSize(15, element);
  }
  for (TownHallProto* element in self.allTownHallsList) {
    size += computeMessageSize(16, element);
  }
  for (LabProto* element in self.allLabsList) {
    size += computeMessageSize(17, element);
  }
  for (PersistentEventProto* element in self.persistentEventsList) {
    size += computeMessageSize(18, element);
  }
  for (MonsterBattleDialogueProto* element in self.mbdsList) {
    size += computeMessageSize(19, element);
  }
  for (ClanRaidProto* element in self.raidsList) {
    size += computeMessageSize(20, element);
  }
  for (PersistentClanEventProto* element in self.persistentClanEventsList) {
    size += computeMessageSize(21, element);
  }
  for (ItemProto* element in self.itemsList) {
    size += computeMessageSize(22, element);
  }
  for (ObstacleProto* element in self.obstaclesList) {
    size += computeMessageSize(23, element);
  }
  for (ClanIconProto* element in self.clanIconsList) {
    size += computeMessageSize(24, element);
  }
  for (PvpLeagueProto* element in self.leaguesList) {
    size += computeMessageSize(25, element);
  }
  for (AchievementProto* element in self.achievementsList) {
    size += computeMessageSize(26, element);
  }
  for (MiniJobCenterProto* element in self.allMiniJobCentersList) {
    size += computeMessageSize(27, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (StaticDataProto*) parseFromData:(NSData*) data {
  return (StaticDataProto*)[[[StaticDataProto builder] mergeFromData:data] build];
}
+ (StaticDataProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StaticDataProto*)[[[StaticDataProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StaticDataProto*) parseFromInputStream:(NSInputStream*) input {
  return (StaticDataProto*)[[[StaticDataProto builder] mergeFromInputStream:input] build];
}
+ (StaticDataProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StaticDataProto*)[[[StaticDataProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StaticDataProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StaticDataProto*)[[[StaticDataProto builder] mergeFromCodedInputStream:input] build];
}
+ (StaticDataProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StaticDataProto*)[[[StaticDataProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StaticDataProto_Builder*) builder {
  return [[[StaticDataProto_Builder alloc] init] autorelease];
}
+ (StaticDataProto_Builder*) builderWithPrototype:(StaticDataProto*) prototype {
  return [[StaticDataProto builder] mergeFrom:prototype];
}
- (StaticDataProto_Builder*) builder {
  return [StaticDataProto builder];
}
@end

@interface StaticDataProto_Builder()
@property (retain) StaticDataProto* result;
@end

@implementation StaticDataProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[StaticDataProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (StaticDataProto_Builder*) clear {
  self.result = [[[StaticDataProto alloc] init] autorelease];
  return self;
}
- (StaticDataProto_Builder*) clone {
  return [StaticDataProto builderWithPrototype:result];
}
- (StaticDataProto*) defaultInstance {
  return [StaticDataProto defaultInstance];
}
- (StaticDataProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StaticDataProto*) buildPartial {
  StaticDataProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (StaticDataProto_Builder*) mergeFrom:(StaticDataProto*) other {
  if (other == [StaticDataProto defaultInstance]) {
    return self;
  }
  if (other.hasSender) {
    [self mergeSender:other.sender];
  }
  if (other.mutableExpansionCostsList.count > 0) {
    if (result.mutableExpansionCostsList == nil) {
      result.mutableExpansionCostsList = [NSMutableArray array];
    }
    [result.mutableExpansionCostsList addObjectsFromArray:other.mutableExpansionCostsList];
  }
  if (other.mutableAllCitiesList.count > 0) {
    if (result.mutableAllCitiesList == nil) {
      result.mutableAllCitiesList = [NSMutableArray array];
    }
    [result.mutableAllCitiesList addObjectsFromArray:other.mutableAllCitiesList];
  }
  if (other.mutableAllTasksList.count > 0) {
    if (result.mutableAllTasksList == nil) {
      result.mutableAllTasksList = [NSMutableArray array];
    }
    [result.mutableAllTasksList addObjectsFromArray:other.mutableAllTasksList];
  }
  if (other.mutableAllMonstersList.count > 0) {
    if (result.mutableAllMonstersList == nil) {
      result.mutableAllMonstersList = [NSMutableArray array];
    }
    [result.mutableAllMonstersList addObjectsFromArray:other.mutableAllMonstersList];
  }
  if (other.mutableSlipList.count > 0) {
    if (result.mutableSlipList == nil) {
      result.mutableSlipList = [NSMutableArray array];
    }
    [result.mutableSlipList addObjectsFromArray:other.mutableSlipList];
  }
  if (other.mutableInProgressQuestsList.count > 0) {
    if (result.mutableInProgressQuestsList == nil) {
      result.mutableInProgressQuestsList = [NSMutableArray array];
    }
    [result.mutableInProgressQuestsList addObjectsFromArray:other.mutableInProgressQuestsList];
  }
  if (other.mutableUnredeemedQuestsList.count > 0) {
    if (result.mutableUnredeemedQuestsList == nil) {
      result.mutableUnredeemedQuestsList = [NSMutableArray array];
    }
    [result.mutableUnredeemedQuestsList addObjectsFromArray:other.mutableUnredeemedQuestsList];
  }
  if (other.mutableAvailableQuestsList.count > 0) {
    if (result.mutableAvailableQuestsList == nil) {
      result.mutableAvailableQuestsList = [NSMutableArray array];
    }
    [result.mutableAvailableQuestsList addObjectsFromArray:other.mutableAvailableQuestsList];
  }
  if (other.mutableBoosterPacksList.count > 0) {
    if (result.mutableBoosterPacksList == nil) {
      result.mutableBoosterPacksList = [NSMutableArray array];
    }
    [result.mutableBoosterPacksList addObjectsFromArray:other.mutableBoosterPacksList];
  }
  if (other.mutableAllGeneratorsList.count > 0) {
    if (result.mutableAllGeneratorsList == nil) {
      result.mutableAllGeneratorsList = [NSMutableArray array];
    }
    [result.mutableAllGeneratorsList addObjectsFromArray:other.mutableAllGeneratorsList];
  }
  if (other.mutableAllStoragesList.count > 0) {
    if (result.mutableAllStoragesList == nil) {
      result.mutableAllStoragesList = [NSMutableArray array];
    }
    [result.mutableAllStoragesList addObjectsFromArray:other.mutableAllStoragesList];
  }
  if (other.mutableAllHospitalsList.count > 0) {
    if (result.mutableAllHospitalsList == nil) {
      result.mutableAllHospitalsList = [NSMutableArray array];
    }
    [result.mutableAllHospitalsList addObjectsFromArray:other.mutableAllHospitalsList];
  }
  if (other.mutableAllResidencesList.count > 0) {
    if (result.mutableAllResidencesList == nil) {
      result.mutableAllResidencesList = [NSMutableArray array];
    }
    [result.mutableAllResidencesList addObjectsFromArray:other.mutableAllResidencesList];
  }
  if (other.mutableAllLabsList.count > 0) {
    if (result.mutableAllLabsList == nil) {
      result.mutableAllLabsList = [NSMutableArray array];
    }
    [result.mutableAllLabsList addObjectsFromArray:other.mutableAllLabsList];
  }
  if (other.mutableAllTownHallsList.count > 0) {
    if (result.mutableAllTownHallsList == nil) {
      result.mutableAllTownHallsList = [NSMutableArray array];
    }
    [result.mutableAllTownHallsList addObjectsFromArray:other.mutableAllTownHallsList];
  }
  if (other.mutableAllMiniJobCentersList.count > 0) {
    if (result.mutableAllMiniJobCentersList == nil) {
      result.mutableAllMiniJobCentersList = [NSMutableArray array];
    }
    [result.mutableAllMiniJobCentersList addObjectsFromArray:other.mutableAllMiniJobCentersList];
  }
  if (other.mutablePersistentEventsList.count > 0) {
    if (result.mutablePersistentEventsList == nil) {
      result.mutablePersistentEventsList = [NSMutableArray array];
    }
    [result.mutablePersistentEventsList addObjectsFromArray:other.mutablePersistentEventsList];
  }
  if (other.mutableMbdsList.count > 0) {
    if (result.mutableMbdsList == nil) {
      result.mutableMbdsList = [NSMutableArray array];
    }
    [result.mutableMbdsList addObjectsFromArray:other.mutableMbdsList];
  }
  if (other.mutableRaidsList.count > 0) {
    if (result.mutableRaidsList == nil) {
      result.mutableRaidsList = [NSMutableArray array];
    }
    [result.mutableRaidsList addObjectsFromArray:other.mutableRaidsList];
  }
  if (other.mutablePersistentClanEventsList.count > 0) {
    if (result.mutablePersistentClanEventsList == nil) {
      result.mutablePersistentClanEventsList = [NSMutableArray array];
    }
    [result.mutablePersistentClanEventsList addObjectsFromArray:other.mutablePersistentClanEventsList];
  }
  if (other.mutableItemsList.count > 0) {
    if (result.mutableItemsList == nil) {
      result.mutableItemsList = [NSMutableArray array];
    }
    [result.mutableItemsList addObjectsFromArray:other.mutableItemsList];
  }
  if (other.mutableObstaclesList.count > 0) {
    if (result.mutableObstaclesList == nil) {
      result.mutableObstaclesList = [NSMutableArray array];
    }
    [result.mutableObstaclesList addObjectsFromArray:other.mutableObstaclesList];
  }
  if (other.mutableClanIconsList.count > 0) {
    if (result.mutableClanIconsList == nil) {
      result.mutableClanIconsList = [NSMutableArray array];
    }
    [result.mutableClanIconsList addObjectsFromArray:other.mutableClanIconsList];
  }
  if (other.mutableLeaguesList.count > 0) {
    if (result.mutableLeaguesList == nil) {
      result.mutableLeaguesList = [NSMutableArray array];
    }
    [result.mutableLeaguesList addObjectsFromArray:other.mutableLeaguesList];
  }
  if (other.mutableAchievementsList.count > 0) {
    if (result.mutableAchievementsList == nil) {
      result.mutableAchievementsList = [NSMutableArray array];
    }
    [result.mutableAchievementsList addObjectsFromArray:other.mutableAchievementsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StaticDataProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StaticDataProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MinimumUserProto_Builder* subBuilder = [MinimumUserProto builder];
        if (self.hasSender) {
          [subBuilder mergeFrom:self.sender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSender:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        CityExpansionCostProto_Builder* subBuilder = [CityExpansionCostProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addExpansionCosts:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        FullCityProto_Builder* subBuilder = [FullCityProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllCities:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        FullTaskProto_Builder* subBuilder = [FullTaskProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllTasks:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        MonsterProto_Builder* subBuilder = [MonsterProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllMonsters:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        StaticUserLevelInfoProto_Builder* subBuilder = [StaticUserLevelInfoProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSlip:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        FullQuestProto_Builder* subBuilder = [FullQuestProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addInProgressQuests:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        FullQuestProto_Builder* subBuilder = [FullQuestProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUnredeemedQuests:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        FullQuestProto_Builder* subBuilder = [FullQuestProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAvailableQuests:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        BoosterPackProto_Builder* subBuilder = [BoosterPackProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBoosterPacks:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        ResourceGeneratorProto_Builder* subBuilder = [ResourceGeneratorProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllGenerators:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        ResourceStorageProto_Builder* subBuilder = [ResourceStorageProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllStorages:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        HospitalProto_Builder* subBuilder = [HospitalProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllHospitals:[subBuilder buildPartial]];
        break;
      }
      case 122: {
        ResidenceProto_Builder* subBuilder = [ResidenceProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllResidences:[subBuilder buildPartial]];
        break;
      }
      case 130: {
        TownHallProto_Builder* subBuilder = [TownHallProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllTownHalls:[subBuilder buildPartial]];
        break;
      }
      case 138: {
        LabProto_Builder* subBuilder = [LabProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllLabs:[subBuilder buildPartial]];
        break;
      }
      case 146: {
        PersistentEventProto_Builder* subBuilder = [PersistentEventProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPersistentEvents:[subBuilder buildPartial]];
        break;
      }
      case 154: {
        MonsterBattleDialogueProto_Builder* subBuilder = [MonsterBattleDialogueProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMbds:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        ClanRaidProto_Builder* subBuilder = [ClanRaidProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRaids:[subBuilder buildPartial]];
        break;
      }
      case 170: {
        PersistentClanEventProto_Builder* subBuilder = [PersistentClanEventProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPersistentClanEvents:[subBuilder buildPartial]];
        break;
      }
      case 178: {
        ItemProto_Builder* subBuilder = [ItemProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItems:[subBuilder buildPartial]];
        break;
      }
      case 186: {
        ObstacleProto_Builder* subBuilder = [ObstacleProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addObstacles:[subBuilder buildPartial]];
        break;
      }
      case 194: {
        ClanIconProto_Builder* subBuilder = [ClanIconProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addClanIcons:[subBuilder buildPartial]];
        break;
      }
      case 202: {
        PvpLeagueProto_Builder* subBuilder = [PvpLeagueProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLeagues:[subBuilder buildPartial]];
        break;
      }
      case 210: {
        AchievementProto_Builder* subBuilder = [AchievementProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAchievements:[subBuilder buildPartial]];
        break;
      }
      case 218: {
        MiniJobCenterProto_Builder* subBuilder = [MiniJobCenterProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllMiniJobCenters:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSender {
  return result.hasSender;
}
- (MinimumUserProto*) sender {
  return result.sender;
}
- (StaticDataProto_Builder*) setSender:(MinimumUserProto*) value {
  result.hasSender = YES;
  result.sender = value;
  return self;
}
- (StaticDataProto_Builder*) setSenderBuilder:(MinimumUserProto_Builder*) builderForValue {
  return [self setSender:[builderForValue build]];
}
- (StaticDataProto_Builder*) mergeSender:(MinimumUserProto*) value {
  if (result.hasSender &&
      result.sender != [MinimumUserProto defaultInstance]) {
    result.sender =
      [[[MinimumUserProto builderWithPrototype:result.sender] mergeFrom:value] buildPartial];
  } else {
    result.sender = value;
  }
  result.hasSender = YES;
  return self;
}
- (StaticDataProto_Builder*) clearSender {
  result.hasSender = NO;
  result.sender = [MinimumUserProto defaultInstance];
  return self;
}
- (NSArray*) expansionCostsList {
  if (result.mutableExpansionCostsList == nil) { return [NSArray array]; }
  return result.mutableExpansionCostsList;
}
- (CityExpansionCostProto*) expansionCostsAtIndex:(int32_t) index {
  return [result expansionCostsAtIndex:index];
}
- (StaticDataProto_Builder*) replaceExpansionCostsAtIndex:(int32_t) index with:(CityExpansionCostProto*) value {
  [result.mutableExpansionCostsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllExpansionCosts:(NSArray*) values {
  if (result.mutableExpansionCostsList == nil) {
    result.mutableExpansionCostsList = [NSMutableArray array];
  }
  [result.mutableExpansionCostsList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearExpansionCostsList {
  result.mutableExpansionCostsList = nil;
  return self;
}
- (StaticDataProto_Builder*) addExpansionCosts:(CityExpansionCostProto*) value {
  if (result.mutableExpansionCostsList == nil) {
    result.mutableExpansionCostsList = [NSMutableArray array];
  }
  [result.mutableExpansionCostsList addObject:value];
  return self;
}
- (NSArray*) allCitiesList {
  if (result.mutableAllCitiesList == nil) { return [NSArray array]; }
  return result.mutableAllCitiesList;
}
- (FullCityProto*) allCitiesAtIndex:(int32_t) index {
  return [result allCitiesAtIndex:index];
}
- (StaticDataProto_Builder*) replaceAllCitiesAtIndex:(int32_t) index with:(FullCityProto*) value {
  [result.mutableAllCitiesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllAllCities:(NSArray*) values {
  if (result.mutableAllCitiesList == nil) {
    result.mutableAllCitiesList = [NSMutableArray array];
  }
  [result.mutableAllCitiesList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearAllCitiesList {
  result.mutableAllCitiesList = nil;
  return self;
}
- (StaticDataProto_Builder*) addAllCities:(FullCityProto*) value {
  if (result.mutableAllCitiesList == nil) {
    result.mutableAllCitiesList = [NSMutableArray array];
  }
  [result.mutableAllCitiesList addObject:value];
  return self;
}
- (NSArray*) allTasksList {
  if (result.mutableAllTasksList == nil) { return [NSArray array]; }
  return result.mutableAllTasksList;
}
- (FullTaskProto*) allTasksAtIndex:(int32_t) index {
  return [result allTasksAtIndex:index];
}
- (StaticDataProto_Builder*) replaceAllTasksAtIndex:(int32_t) index with:(FullTaskProto*) value {
  [result.mutableAllTasksList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllAllTasks:(NSArray*) values {
  if (result.mutableAllTasksList == nil) {
    result.mutableAllTasksList = [NSMutableArray array];
  }
  [result.mutableAllTasksList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearAllTasksList {
  result.mutableAllTasksList = nil;
  return self;
}
- (StaticDataProto_Builder*) addAllTasks:(FullTaskProto*) value {
  if (result.mutableAllTasksList == nil) {
    result.mutableAllTasksList = [NSMutableArray array];
  }
  [result.mutableAllTasksList addObject:value];
  return self;
}
- (NSArray*) allMonstersList {
  if (result.mutableAllMonstersList == nil) { return [NSArray array]; }
  return result.mutableAllMonstersList;
}
- (MonsterProto*) allMonstersAtIndex:(int32_t) index {
  return [result allMonstersAtIndex:index];
}
- (StaticDataProto_Builder*) replaceAllMonstersAtIndex:(int32_t) index with:(MonsterProto*) value {
  [result.mutableAllMonstersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllAllMonsters:(NSArray*) values {
  if (result.mutableAllMonstersList == nil) {
    result.mutableAllMonstersList = [NSMutableArray array];
  }
  [result.mutableAllMonstersList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearAllMonstersList {
  result.mutableAllMonstersList = nil;
  return self;
}
- (StaticDataProto_Builder*) addAllMonsters:(MonsterProto*) value {
  if (result.mutableAllMonstersList == nil) {
    result.mutableAllMonstersList = [NSMutableArray array];
  }
  [result.mutableAllMonstersList addObject:value];
  return self;
}
- (NSArray*) slipList {
  if (result.mutableSlipList == nil) { return [NSArray array]; }
  return result.mutableSlipList;
}
- (StaticUserLevelInfoProto*) slipAtIndex:(int32_t) index {
  return [result slipAtIndex:index];
}
- (StaticDataProto_Builder*) replaceSlipAtIndex:(int32_t) index with:(StaticUserLevelInfoProto*) value {
  [result.mutableSlipList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllSlip:(NSArray*) values {
  if (result.mutableSlipList == nil) {
    result.mutableSlipList = [NSMutableArray array];
  }
  [result.mutableSlipList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearSlipList {
  result.mutableSlipList = nil;
  return self;
}
- (StaticDataProto_Builder*) addSlip:(StaticUserLevelInfoProto*) value {
  if (result.mutableSlipList == nil) {
    result.mutableSlipList = [NSMutableArray array];
  }
  [result.mutableSlipList addObject:value];
  return self;
}
- (NSArray*) inProgressQuestsList {
  if (result.mutableInProgressQuestsList == nil) { return [NSArray array]; }
  return result.mutableInProgressQuestsList;
}
- (FullQuestProto*) inProgressQuestsAtIndex:(int32_t) index {
  return [result inProgressQuestsAtIndex:index];
}
- (StaticDataProto_Builder*) replaceInProgressQuestsAtIndex:(int32_t) index with:(FullQuestProto*) value {
  [result.mutableInProgressQuestsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllInProgressQuests:(NSArray*) values {
  if (result.mutableInProgressQuestsList == nil) {
    result.mutableInProgressQuestsList = [NSMutableArray array];
  }
  [result.mutableInProgressQuestsList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearInProgressQuestsList {
  result.mutableInProgressQuestsList = nil;
  return self;
}
- (StaticDataProto_Builder*) addInProgressQuests:(FullQuestProto*) value {
  if (result.mutableInProgressQuestsList == nil) {
    result.mutableInProgressQuestsList = [NSMutableArray array];
  }
  [result.mutableInProgressQuestsList addObject:value];
  return self;
}
- (NSArray*) unredeemedQuestsList {
  if (result.mutableUnredeemedQuestsList == nil) { return [NSArray array]; }
  return result.mutableUnredeemedQuestsList;
}
- (FullQuestProto*) unredeemedQuestsAtIndex:(int32_t) index {
  return [result unredeemedQuestsAtIndex:index];
}
- (StaticDataProto_Builder*) replaceUnredeemedQuestsAtIndex:(int32_t) index with:(FullQuestProto*) value {
  [result.mutableUnredeemedQuestsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllUnredeemedQuests:(NSArray*) values {
  if (result.mutableUnredeemedQuestsList == nil) {
    result.mutableUnredeemedQuestsList = [NSMutableArray array];
  }
  [result.mutableUnredeemedQuestsList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearUnredeemedQuestsList {
  result.mutableUnredeemedQuestsList = nil;
  return self;
}
- (StaticDataProto_Builder*) addUnredeemedQuests:(FullQuestProto*) value {
  if (result.mutableUnredeemedQuestsList == nil) {
    result.mutableUnredeemedQuestsList = [NSMutableArray array];
  }
  [result.mutableUnredeemedQuestsList addObject:value];
  return self;
}
- (NSArray*) availableQuestsList {
  if (result.mutableAvailableQuestsList == nil) { return [NSArray array]; }
  return result.mutableAvailableQuestsList;
}
- (FullQuestProto*) availableQuestsAtIndex:(int32_t) index {
  return [result availableQuestsAtIndex:index];
}
- (StaticDataProto_Builder*) replaceAvailableQuestsAtIndex:(int32_t) index with:(FullQuestProto*) value {
  [result.mutableAvailableQuestsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllAvailableQuests:(NSArray*) values {
  if (result.mutableAvailableQuestsList == nil) {
    result.mutableAvailableQuestsList = [NSMutableArray array];
  }
  [result.mutableAvailableQuestsList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearAvailableQuestsList {
  result.mutableAvailableQuestsList = nil;
  return self;
}
- (StaticDataProto_Builder*) addAvailableQuests:(FullQuestProto*) value {
  if (result.mutableAvailableQuestsList == nil) {
    result.mutableAvailableQuestsList = [NSMutableArray array];
  }
  [result.mutableAvailableQuestsList addObject:value];
  return self;
}
- (NSArray*) boosterPacksList {
  if (result.mutableBoosterPacksList == nil) { return [NSArray array]; }
  return result.mutableBoosterPacksList;
}
- (BoosterPackProto*) boosterPacksAtIndex:(int32_t) index {
  return [result boosterPacksAtIndex:index];
}
- (StaticDataProto_Builder*) replaceBoosterPacksAtIndex:(int32_t) index with:(BoosterPackProto*) value {
  [result.mutableBoosterPacksList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllBoosterPacks:(NSArray*) values {
  if (result.mutableBoosterPacksList == nil) {
    result.mutableBoosterPacksList = [NSMutableArray array];
  }
  [result.mutableBoosterPacksList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearBoosterPacksList {
  result.mutableBoosterPacksList = nil;
  return self;
}
- (StaticDataProto_Builder*) addBoosterPacks:(BoosterPackProto*) value {
  if (result.mutableBoosterPacksList == nil) {
    result.mutableBoosterPacksList = [NSMutableArray array];
  }
  [result.mutableBoosterPacksList addObject:value];
  return self;
}
- (NSArray*) allGeneratorsList {
  if (result.mutableAllGeneratorsList == nil) { return [NSArray array]; }
  return result.mutableAllGeneratorsList;
}
- (ResourceGeneratorProto*) allGeneratorsAtIndex:(int32_t) index {
  return [result allGeneratorsAtIndex:index];
}
- (StaticDataProto_Builder*) replaceAllGeneratorsAtIndex:(int32_t) index with:(ResourceGeneratorProto*) value {
  [result.mutableAllGeneratorsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllAllGenerators:(NSArray*) values {
  if (result.mutableAllGeneratorsList == nil) {
    result.mutableAllGeneratorsList = [NSMutableArray array];
  }
  [result.mutableAllGeneratorsList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearAllGeneratorsList {
  result.mutableAllGeneratorsList = nil;
  return self;
}
- (StaticDataProto_Builder*) addAllGenerators:(ResourceGeneratorProto*) value {
  if (result.mutableAllGeneratorsList == nil) {
    result.mutableAllGeneratorsList = [NSMutableArray array];
  }
  [result.mutableAllGeneratorsList addObject:value];
  return self;
}
- (NSArray*) allStoragesList {
  if (result.mutableAllStoragesList == nil) { return [NSArray array]; }
  return result.mutableAllStoragesList;
}
- (ResourceStorageProto*) allStoragesAtIndex:(int32_t) index {
  return [result allStoragesAtIndex:index];
}
- (StaticDataProto_Builder*) replaceAllStoragesAtIndex:(int32_t) index with:(ResourceStorageProto*) value {
  [result.mutableAllStoragesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllAllStorages:(NSArray*) values {
  if (result.mutableAllStoragesList == nil) {
    result.mutableAllStoragesList = [NSMutableArray array];
  }
  [result.mutableAllStoragesList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearAllStoragesList {
  result.mutableAllStoragesList = nil;
  return self;
}
- (StaticDataProto_Builder*) addAllStorages:(ResourceStorageProto*) value {
  if (result.mutableAllStoragesList == nil) {
    result.mutableAllStoragesList = [NSMutableArray array];
  }
  [result.mutableAllStoragesList addObject:value];
  return self;
}
- (NSArray*) allHospitalsList {
  if (result.mutableAllHospitalsList == nil) { return [NSArray array]; }
  return result.mutableAllHospitalsList;
}
- (HospitalProto*) allHospitalsAtIndex:(int32_t) index {
  return [result allHospitalsAtIndex:index];
}
- (StaticDataProto_Builder*) replaceAllHospitalsAtIndex:(int32_t) index with:(HospitalProto*) value {
  [result.mutableAllHospitalsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllAllHospitals:(NSArray*) values {
  if (result.mutableAllHospitalsList == nil) {
    result.mutableAllHospitalsList = [NSMutableArray array];
  }
  [result.mutableAllHospitalsList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearAllHospitalsList {
  result.mutableAllHospitalsList = nil;
  return self;
}
- (StaticDataProto_Builder*) addAllHospitals:(HospitalProto*) value {
  if (result.mutableAllHospitalsList == nil) {
    result.mutableAllHospitalsList = [NSMutableArray array];
  }
  [result.mutableAllHospitalsList addObject:value];
  return self;
}
- (NSArray*) allResidencesList {
  if (result.mutableAllResidencesList == nil) { return [NSArray array]; }
  return result.mutableAllResidencesList;
}
- (ResidenceProto*) allResidencesAtIndex:(int32_t) index {
  return [result allResidencesAtIndex:index];
}
- (StaticDataProto_Builder*) replaceAllResidencesAtIndex:(int32_t) index with:(ResidenceProto*) value {
  [result.mutableAllResidencesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllAllResidences:(NSArray*) values {
  if (result.mutableAllResidencesList == nil) {
    result.mutableAllResidencesList = [NSMutableArray array];
  }
  [result.mutableAllResidencesList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearAllResidencesList {
  result.mutableAllResidencesList = nil;
  return self;
}
- (StaticDataProto_Builder*) addAllResidences:(ResidenceProto*) value {
  if (result.mutableAllResidencesList == nil) {
    result.mutableAllResidencesList = [NSMutableArray array];
  }
  [result.mutableAllResidencesList addObject:value];
  return self;
}
- (NSArray*) allLabsList {
  if (result.mutableAllLabsList == nil) { return [NSArray array]; }
  return result.mutableAllLabsList;
}
- (LabProto*) allLabsAtIndex:(int32_t) index {
  return [result allLabsAtIndex:index];
}
- (StaticDataProto_Builder*) replaceAllLabsAtIndex:(int32_t) index with:(LabProto*) value {
  [result.mutableAllLabsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllAllLabs:(NSArray*) values {
  if (result.mutableAllLabsList == nil) {
    result.mutableAllLabsList = [NSMutableArray array];
  }
  [result.mutableAllLabsList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearAllLabsList {
  result.mutableAllLabsList = nil;
  return self;
}
- (StaticDataProto_Builder*) addAllLabs:(LabProto*) value {
  if (result.mutableAllLabsList == nil) {
    result.mutableAllLabsList = [NSMutableArray array];
  }
  [result.mutableAllLabsList addObject:value];
  return self;
}
- (NSArray*) allTownHallsList {
  if (result.mutableAllTownHallsList == nil) { return [NSArray array]; }
  return result.mutableAllTownHallsList;
}
- (TownHallProto*) allTownHallsAtIndex:(int32_t) index {
  return [result allTownHallsAtIndex:index];
}
- (StaticDataProto_Builder*) replaceAllTownHallsAtIndex:(int32_t) index with:(TownHallProto*) value {
  [result.mutableAllTownHallsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllAllTownHalls:(NSArray*) values {
  if (result.mutableAllTownHallsList == nil) {
    result.mutableAllTownHallsList = [NSMutableArray array];
  }
  [result.mutableAllTownHallsList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearAllTownHallsList {
  result.mutableAllTownHallsList = nil;
  return self;
}
- (StaticDataProto_Builder*) addAllTownHalls:(TownHallProto*) value {
  if (result.mutableAllTownHallsList == nil) {
    result.mutableAllTownHallsList = [NSMutableArray array];
  }
  [result.mutableAllTownHallsList addObject:value];
  return self;
}
- (NSArray*) allMiniJobCentersList {
  if (result.mutableAllMiniJobCentersList == nil) { return [NSArray array]; }
  return result.mutableAllMiniJobCentersList;
}
- (MiniJobCenterProto*) allMiniJobCentersAtIndex:(int32_t) index {
  return [result allMiniJobCentersAtIndex:index];
}
- (StaticDataProto_Builder*) replaceAllMiniJobCentersAtIndex:(int32_t) index with:(MiniJobCenterProto*) value {
  [result.mutableAllMiniJobCentersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllAllMiniJobCenters:(NSArray*) values {
  if (result.mutableAllMiniJobCentersList == nil) {
    result.mutableAllMiniJobCentersList = [NSMutableArray array];
  }
  [result.mutableAllMiniJobCentersList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearAllMiniJobCentersList {
  result.mutableAllMiniJobCentersList = nil;
  return self;
}
- (StaticDataProto_Builder*) addAllMiniJobCenters:(MiniJobCenterProto*) value {
  if (result.mutableAllMiniJobCentersList == nil) {
    result.mutableAllMiniJobCentersList = [NSMutableArray array];
  }
  [result.mutableAllMiniJobCentersList addObject:value];
  return self;
}
- (NSArray*) persistentEventsList {
  if (result.mutablePersistentEventsList == nil) { return [NSArray array]; }
  return result.mutablePersistentEventsList;
}
- (PersistentEventProto*) persistentEventsAtIndex:(int32_t) index {
  return [result persistentEventsAtIndex:index];
}
- (StaticDataProto_Builder*) replacePersistentEventsAtIndex:(int32_t) index with:(PersistentEventProto*) value {
  [result.mutablePersistentEventsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllPersistentEvents:(NSArray*) values {
  if (result.mutablePersistentEventsList == nil) {
    result.mutablePersistentEventsList = [NSMutableArray array];
  }
  [result.mutablePersistentEventsList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearPersistentEventsList {
  result.mutablePersistentEventsList = nil;
  return self;
}
- (StaticDataProto_Builder*) addPersistentEvents:(PersistentEventProto*) value {
  if (result.mutablePersistentEventsList == nil) {
    result.mutablePersistentEventsList = [NSMutableArray array];
  }
  [result.mutablePersistentEventsList addObject:value];
  return self;
}
- (NSArray*) mbdsList {
  if (result.mutableMbdsList == nil) { return [NSArray array]; }
  return result.mutableMbdsList;
}
- (MonsterBattleDialogueProto*) mbdsAtIndex:(int32_t) index {
  return [result mbdsAtIndex:index];
}
- (StaticDataProto_Builder*) replaceMbdsAtIndex:(int32_t) index with:(MonsterBattleDialogueProto*) value {
  [result.mutableMbdsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllMbds:(NSArray*) values {
  if (result.mutableMbdsList == nil) {
    result.mutableMbdsList = [NSMutableArray array];
  }
  [result.mutableMbdsList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearMbdsList {
  result.mutableMbdsList = nil;
  return self;
}
- (StaticDataProto_Builder*) addMbds:(MonsterBattleDialogueProto*) value {
  if (result.mutableMbdsList == nil) {
    result.mutableMbdsList = [NSMutableArray array];
  }
  [result.mutableMbdsList addObject:value];
  return self;
}
- (NSArray*) raidsList {
  if (result.mutableRaidsList == nil) { return [NSArray array]; }
  return result.mutableRaidsList;
}
- (ClanRaidProto*) raidsAtIndex:(int32_t) index {
  return [result raidsAtIndex:index];
}
- (StaticDataProto_Builder*) replaceRaidsAtIndex:(int32_t) index with:(ClanRaidProto*) value {
  [result.mutableRaidsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllRaids:(NSArray*) values {
  if (result.mutableRaidsList == nil) {
    result.mutableRaidsList = [NSMutableArray array];
  }
  [result.mutableRaidsList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearRaidsList {
  result.mutableRaidsList = nil;
  return self;
}
- (StaticDataProto_Builder*) addRaids:(ClanRaidProto*) value {
  if (result.mutableRaidsList == nil) {
    result.mutableRaidsList = [NSMutableArray array];
  }
  [result.mutableRaidsList addObject:value];
  return self;
}
- (NSArray*) persistentClanEventsList {
  if (result.mutablePersistentClanEventsList == nil) { return [NSArray array]; }
  return result.mutablePersistentClanEventsList;
}
- (PersistentClanEventProto*) persistentClanEventsAtIndex:(int32_t) index {
  return [result persistentClanEventsAtIndex:index];
}
- (StaticDataProto_Builder*) replacePersistentClanEventsAtIndex:(int32_t) index with:(PersistentClanEventProto*) value {
  [result.mutablePersistentClanEventsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllPersistentClanEvents:(NSArray*) values {
  if (result.mutablePersistentClanEventsList == nil) {
    result.mutablePersistentClanEventsList = [NSMutableArray array];
  }
  [result.mutablePersistentClanEventsList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearPersistentClanEventsList {
  result.mutablePersistentClanEventsList = nil;
  return self;
}
- (StaticDataProto_Builder*) addPersistentClanEvents:(PersistentClanEventProto*) value {
  if (result.mutablePersistentClanEventsList == nil) {
    result.mutablePersistentClanEventsList = [NSMutableArray array];
  }
  [result.mutablePersistentClanEventsList addObject:value];
  return self;
}
- (NSArray*) itemsList {
  if (result.mutableItemsList == nil) { return [NSArray array]; }
  return result.mutableItemsList;
}
- (ItemProto*) itemsAtIndex:(int32_t) index {
  return [result itemsAtIndex:index];
}
- (StaticDataProto_Builder*) replaceItemsAtIndex:(int32_t) index with:(ItemProto*) value {
  [result.mutableItemsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllItems:(NSArray*) values {
  if (result.mutableItemsList == nil) {
    result.mutableItemsList = [NSMutableArray array];
  }
  [result.mutableItemsList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearItemsList {
  result.mutableItemsList = nil;
  return self;
}
- (StaticDataProto_Builder*) addItems:(ItemProto*) value {
  if (result.mutableItemsList == nil) {
    result.mutableItemsList = [NSMutableArray array];
  }
  [result.mutableItemsList addObject:value];
  return self;
}
- (NSArray*) obstaclesList {
  if (result.mutableObstaclesList == nil) { return [NSArray array]; }
  return result.mutableObstaclesList;
}
- (ObstacleProto*) obstaclesAtIndex:(int32_t) index {
  return [result obstaclesAtIndex:index];
}
- (StaticDataProto_Builder*) replaceObstaclesAtIndex:(int32_t) index with:(ObstacleProto*) value {
  [result.mutableObstaclesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllObstacles:(NSArray*) values {
  if (result.mutableObstaclesList == nil) {
    result.mutableObstaclesList = [NSMutableArray array];
  }
  [result.mutableObstaclesList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearObstaclesList {
  result.mutableObstaclesList = nil;
  return self;
}
- (StaticDataProto_Builder*) addObstacles:(ObstacleProto*) value {
  if (result.mutableObstaclesList == nil) {
    result.mutableObstaclesList = [NSMutableArray array];
  }
  [result.mutableObstaclesList addObject:value];
  return self;
}
- (NSArray*) clanIconsList {
  if (result.mutableClanIconsList == nil) { return [NSArray array]; }
  return result.mutableClanIconsList;
}
- (ClanIconProto*) clanIconsAtIndex:(int32_t) index {
  return [result clanIconsAtIndex:index];
}
- (StaticDataProto_Builder*) replaceClanIconsAtIndex:(int32_t) index with:(ClanIconProto*) value {
  [result.mutableClanIconsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllClanIcons:(NSArray*) values {
  if (result.mutableClanIconsList == nil) {
    result.mutableClanIconsList = [NSMutableArray array];
  }
  [result.mutableClanIconsList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearClanIconsList {
  result.mutableClanIconsList = nil;
  return self;
}
- (StaticDataProto_Builder*) addClanIcons:(ClanIconProto*) value {
  if (result.mutableClanIconsList == nil) {
    result.mutableClanIconsList = [NSMutableArray array];
  }
  [result.mutableClanIconsList addObject:value];
  return self;
}
- (NSArray*) leaguesList {
  if (result.mutableLeaguesList == nil) { return [NSArray array]; }
  return result.mutableLeaguesList;
}
- (PvpLeagueProto*) leaguesAtIndex:(int32_t) index {
  return [result leaguesAtIndex:index];
}
- (StaticDataProto_Builder*) replaceLeaguesAtIndex:(int32_t) index with:(PvpLeagueProto*) value {
  [result.mutableLeaguesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllLeagues:(NSArray*) values {
  if (result.mutableLeaguesList == nil) {
    result.mutableLeaguesList = [NSMutableArray array];
  }
  [result.mutableLeaguesList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearLeaguesList {
  result.mutableLeaguesList = nil;
  return self;
}
- (StaticDataProto_Builder*) addLeagues:(PvpLeagueProto*) value {
  if (result.mutableLeaguesList == nil) {
    result.mutableLeaguesList = [NSMutableArray array];
  }
  [result.mutableLeaguesList addObject:value];
  return self;
}
- (NSArray*) achievementsList {
  if (result.mutableAchievementsList == nil) { return [NSArray array]; }
  return result.mutableAchievementsList;
}
- (AchievementProto*) achievementsAtIndex:(int32_t) index {
  return [result achievementsAtIndex:index];
}
- (StaticDataProto_Builder*) replaceAchievementsAtIndex:(int32_t) index with:(AchievementProto*) value {
  [result.mutableAchievementsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (StaticDataProto_Builder*) addAllAchievements:(NSArray*) values {
  if (result.mutableAchievementsList == nil) {
    result.mutableAchievementsList = [NSMutableArray array];
  }
  [result.mutableAchievementsList addObjectsFromArray:values];
  return self;
}
- (StaticDataProto_Builder*) clearAchievementsList {
  result.mutableAchievementsList = nil;
  return self;
}
- (StaticDataProto_Builder*) addAchievements:(AchievementProto*) value {
  if (result.mutableAchievementsList == nil) {
    result.mutableAchievementsList = [NSMutableArray array];
  }
  [result.mutableAchievementsList addObject:value];
  return self;
}
@end

