// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ProtocolBuffers.h"

#import "Chat.pb.h"
#import "User.pb.h"

@class ColorProto;
@class ColorProto_Builder;
@class FullUserProto;
@class FullUserProto_Builder;
@class GroupChatMessageProto;
@class GroupChatMessageProto_Builder;
@class MinimumClanProto;
@class MinimumClanProto_Builder;
@class MinimumUserProto;
@class MinimumUserProtoWithFacebookId;
@class MinimumUserProtoWithFacebookId_Builder;
@class MinimumUserProtoWithLevel;
@class MinimumUserProtoWithLevelForTournament;
@class MinimumUserProtoWithLevelForTournament_Builder;
@class MinimumUserProtoWithLevel_Builder;
@class MinimumUserProtoWithMaxResources;
@class MinimumUserProtoWithMaxResources_Builder;
@class MinimumUserProto_Builder;
@class PrivateChatPostProto;
@class PrivateChatPostProto_Builder;
@class StaticUserLevelInfoProto;
@class StaticUserLevelInfoProto_Builder;
@class TournamentEventProto;
@class TournamentEventProto_Builder;
@class TournamentEventRewardProto;
@class TournamentEventRewardProto_Builder;
@class UserFacebookInviteForSlotProto;
@class UserFacebookInviteForSlotProto_Builder;
@class UserPvpLeagueProto;
@class UserPvpLeagueProto_Builder;

@interface TournamentStuffRoot : NSObject {
}
+ (PBExtensionRegistry*) extensionRegistry;
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry;
@end

@interface TournamentEventProto : PBGeneratedMessage {
@private
  BOOL hasStartDate_:1;
  BOOL hasEndDate_:1;
  BOOL hasLastShowDate_:1;
  BOOL hasEventId_:1;
  BOOL hasEventName_:1;
  int64_t startDate;
  int64_t endDate;
  int64_t lastShowDate;
  int32_t eventId;
  NSString* eventName;
  NSMutableArray* mutableRewardsList;
}
- (BOOL) hasEventId;
- (BOOL) hasStartDate;
- (BOOL) hasEndDate;
- (BOOL) hasEventName;
- (BOOL) hasLastShowDate;
@property (readonly) int32_t eventId;
@property (readonly) int64_t startDate;
@property (readonly) int64_t endDate;
@property (readonly, retain) NSString* eventName;
@property (readonly) int64_t lastShowDate;
- (NSArray*) rewardsList;
- (TournamentEventRewardProto*) rewardsAtIndex:(int32_t) index;

+ (TournamentEventProto*) defaultInstance;
- (TournamentEventProto*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (TournamentEventProto_Builder*) builder;
+ (TournamentEventProto_Builder*) builder;
+ (TournamentEventProto_Builder*) builderWithPrototype:(TournamentEventProto*) prototype;

+ (TournamentEventProto*) parseFromData:(NSData*) data;
+ (TournamentEventProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (TournamentEventProto*) parseFromInputStream:(NSInputStream*) input;
+ (TournamentEventProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (TournamentEventProto*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (TournamentEventProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface TournamentEventProto_Builder : PBGeneratedMessage_Builder {
@private
  TournamentEventProto* result;
}

- (TournamentEventProto*) defaultInstance;

- (TournamentEventProto_Builder*) clear;
- (TournamentEventProto_Builder*) clone;

- (TournamentEventProto*) build;
- (TournamentEventProto*) buildPartial;

- (TournamentEventProto_Builder*) mergeFrom:(TournamentEventProto*) other;
- (TournamentEventProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (TournamentEventProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasEventId;
- (int32_t) eventId;
- (TournamentEventProto_Builder*) setEventId:(int32_t) value;
- (TournamentEventProto_Builder*) clearEventId;

- (BOOL) hasStartDate;
- (int64_t) startDate;
- (TournamentEventProto_Builder*) setStartDate:(int64_t) value;
- (TournamentEventProto_Builder*) clearStartDate;

- (BOOL) hasEndDate;
- (int64_t) endDate;
- (TournamentEventProto_Builder*) setEndDate:(int64_t) value;
- (TournamentEventProto_Builder*) clearEndDate;

- (BOOL) hasEventName;
- (NSString*) eventName;
- (TournamentEventProto_Builder*) setEventName:(NSString*) value;
- (TournamentEventProto_Builder*) clearEventName;

- (NSArray*) rewardsList;
- (TournamentEventRewardProto*) rewardsAtIndex:(int32_t) index;
- (TournamentEventProto_Builder*) replaceRewardsAtIndex:(int32_t) index with:(TournamentEventRewardProto*) value;
- (TournamentEventProto_Builder*) addRewards:(TournamentEventRewardProto*) value;
- (TournamentEventProto_Builder*) addAllRewards:(NSArray*) values;
- (TournamentEventProto_Builder*) clearRewardsList;

- (BOOL) hasLastShowDate;
- (int64_t) lastShowDate;
- (TournamentEventProto_Builder*) setLastShowDate:(int64_t) value;
- (TournamentEventProto_Builder*) clearLastShowDate;
@end

@interface TournamentEventRewardProto : PBGeneratedMessage {
@private
  BOOL hasTournamentEventId_:1;
  BOOL hasMinRank_:1;
  BOOL hasMaxRank_:1;
  BOOL hasGoldRewarded_:1;
  BOOL hasBackgroundImageName_:1;
  BOOL hasPrizeImageName_:1;
  BOOL hasTitleColor_:1;
  int32_t tournamentEventId;
  int32_t minRank;
  int32_t maxRank;
  int32_t goldRewarded;
  NSString* backgroundImageName;
  NSString* prizeImageName;
  ColorProto* titleColor;
}
- (BOOL) hasTournamentEventId;
- (BOOL) hasMinRank;
- (BOOL) hasMaxRank;
- (BOOL) hasGoldRewarded;
- (BOOL) hasBackgroundImageName;
- (BOOL) hasPrizeImageName;
- (BOOL) hasTitleColor;
@property (readonly) int32_t tournamentEventId;
@property (readonly) int32_t minRank;
@property (readonly) int32_t maxRank;
@property (readonly) int32_t goldRewarded;
@property (readonly, retain) NSString* backgroundImageName;
@property (readonly, retain) NSString* prizeImageName;
@property (readonly, retain) ColorProto* titleColor;

+ (TournamentEventRewardProto*) defaultInstance;
- (TournamentEventRewardProto*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (TournamentEventRewardProto_Builder*) builder;
+ (TournamentEventRewardProto_Builder*) builder;
+ (TournamentEventRewardProto_Builder*) builderWithPrototype:(TournamentEventRewardProto*) prototype;

+ (TournamentEventRewardProto*) parseFromData:(NSData*) data;
+ (TournamentEventRewardProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (TournamentEventRewardProto*) parseFromInputStream:(NSInputStream*) input;
+ (TournamentEventRewardProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (TournamentEventRewardProto*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (TournamentEventRewardProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface TournamentEventRewardProto_Builder : PBGeneratedMessage_Builder {
@private
  TournamentEventRewardProto* result;
}

- (TournamentEventRewardProto*) defaultInstance;

- (TournamentEventRewardProto_Builder*) clear;
- (TournamentEventRewardProto_Builder*) clone;

- (TournamentEventRewardProto*) build;
- (TournamentEventRewardProto*) buildPartial;

- (TournamentEventRewardProto_Builder*) mergeFrom:(TournamentEventRewardProto*) other;
- (TournamentEventRewardProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (TournamentEventRewardProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasTournamentEventId;
- (int32_t) tournamentEventId;
- (TournamentEventRewardProto_Builder*) setTournamentEventId:(int32_t) value;
- (TournamentEventRewardProto_Builder*) clearTournamentEventId;

- (BOOL) hasMinRank;
- (int32_t) minRank;
- (TournamentEventRewardProto_Builder*) setMinRank:(int32_t) value;
- (TournamentEventRewardProto_Builder*) clearMinRank;

- (BOOL) hasMaxRank;
- (int32_t) maxRank;
- (TournamentEventRewardProto_Builder*) setMaxRank:(int32_t) value;
- (TournamentEventRewardProto_Builder*) clearMaxRank;

- (BOOL) hasGoldRewarded;
- (int32_t) goldRewarded;
- (TournamentEventRewardProto_Builder*) setGoldRewarded:(int32_t) value;
- (TournamentEventRewardProto_Builder*) clearGoldRewarded;

- (BOOL) hasBackgroundImageName;
- (NSString*) backgroundImageName;
- (TournamentEventRewardProto_Builder*) setBackgroundImageName:(NSString*) value;
- (TournamentEventRewardProto_Builder*) clearBackgroundImageName;

- (BOOL) hasPrizeImageName;
- (NSString*) prizeImageName;
- (TournamentEventRewardProto_Builder*) setPrizeImageName:(NSString*) value;
- (TournamentEventRewardProto_Builder*) clearPrizeImageName;

- (BOOL) hasTitleColor;
- (ColorProto*) titleColor;
- (TournamentEventRewardProto_Builder*) setTitleColor:(ColorProto*) value;
- (TournamentEventRewardProto_Builder*) setTitleColorBuilder:(ColorProto_Builder*) builderForValue;
- (TournamentEventRewardProto_Builder*) mergeTitleColor:(ColorProto*) value;
- (TournamentEventRewardProto_Builder*) clearTitleColor;
@end

@interface MinimumUserProtoWithLevelForTournament : PBGeneratedMessage {
@private
  BOOL hasTournamentScore_:1;
  BOOL hasLevel_:1;
  BOOL hasTournamentRank_:1;
  BOOL hasMinUserProto_:1;
  Float64 tournamentScore;
  int32_t level;
  int32_t tournamentRank;
  MinimumUserProto* minUserProto;
}
- (BOOL) hasMinUserProto;
- (BOOL) hasLevel;
- (BOOL) hasTournamentRank;
- (BOOL) hasTournamentScore;
@property (readonly, retain) MinimumUserProto* minUserProto;
@property (readonly) int32_t level;
@property (readonly) int32_t tournamentRank;
@property (readonly) Float64 tournamentScore;

+ (MinimumUserProtoWithLevelForTournament*) defaultInstance;
- (MinimumUserProtoWithLevelForTournament*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (MinimumUserProtoWithLevelForTournament_Builder*) builder;
+ (MinimumUserProtoWithLevelForTournament_Builder*) builder;
+ (MinimumUserProtoWithLevelForTournament_Builder*) builderWithPrototype:(MinimumUserProtoWithLevelForTournament*) prototype;

+ (MinimumUserProtoWithLevelForTournament*) parseFromData:(NSData*) data;
+ (MinimumUserProtoWithLevelForTournament*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (MinimumUserProtoWithLevelForTournament*) parseFromInputStream:(NSInputStream*) input;
+ (MinimumUserProtoWithLevelForTournament*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (MinimumUserProtoWithLevelForTournament*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (MinimumUserProtoWithLevelForTournament*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface MinimumUserProtoWithLevelForTournament_Builder : PBGeneratedMessage_Builder {
@private
  MinimumUserProtoWithLevelForTournament* result;
}

- (MinimumUserProtoWithLevelForTournament*) defaultInstance;

- (MinimumUserProtoWithLevelForTournament_Builder*) clear;
- (MinimumUserProtoWithLevelForTournament_Builder*) clone;

- (MinimumUserProtoWithLevelForTournament*) build;
- (MinimumUserProtoWithLevelForTournament*) buildPartial;

- (MinimumUserProtoWithLevelForTournament_Builder*) mergeFrom:(MinimumUserProtoWithLevelForTournament*) other;
- (MinimumUserProtoWithLevelForTournament_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (MinimumUserProtoWithLevelForTournament_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasMinUserProto;
- (MinimumUserProto*) minUserProto;
- (MinimumUserProtoWithLevelForTournament_Builder*) setMinUserProto:(MinimumUserProto*) value;
- (MinimumUserProtoWithLevelForTournament_Builder*) setMinUserProtoBuilder:(MinimumUserProto_Builder*) builderForValue;
- (MinimumUserProtoWithLevelForTournament_Builder*) mergeMinUserProto:(MinimumUserProto*) value;
- (MinimumUserProtoWithLevelForTournament_Builder*) clearMinUserProto;

- (BOOL) hasLevel;
- (int32_t) level;
- (MinimumUserProtoWithLevelForTournament_Builder*) setLevel:(int32_t) value;
- (MinimumUserProtoWithLevelForTournament_Builder*) clearLevel;

- (BOOL) hasTournamentRank;
- (int32_t) tournamentRank;
- (MinimumUserProtoWithLevelForTournament_Builder*) setTournamentRank:(int32_t) value;
- (MinimumUserProtoWithLevelForTournament_Builder*) clearTournamentRank;

- (BOOL) hasTournamentScore;
- (Float64) tournamentScore;
- (MinimumUserProtoWithLevelForTournament_Builder*) setTournamentScore:(Float64) value;
- (MinimumUserProtoWithLevelForTournament_Builder*) clearTournamentScore;
@end

