// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "EventTournament.pb.h"

@implementation EventTournamentRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [EventTournamentRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [TournamentStuffRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface RetrieveTournamentRankingsRequestProto ()
@property (retain) MinimumUserProto* sender;
@property int32_t eventId;
@property int32_t afterThisRank;
@end

@implementation RetrieveTournamentRankingsRequestProto

- (BOOL) hasSender {
  return !!hasSender_;
}
- (void) setHasSender:(BOOL) value {
  hasSender_ = !!value;
}
@synthesize sender;
- (BOOL) hasEventId {
  return !!hasEventId_;
}
- (void) setHasEventId:(BOOL) value {
  hasEventId_ = !!value;
}
@synthesize eventId;
- (BOOL) hasAfterThisRank {
  return !!hasAfterThisRank_;
}
- (void) setHasAfterThisRank:(BOOL) value {
  hasAfterThisRank_ = !!value;
}
@synthesize afterThisRank;
- (void) dealloc {
  self.sender = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.sender = [MinimumUserProto defaultInstance];
    self.eventId = 0;
    self.afterThisRank = 0;
  }
  return self;
}
static RetrieveTournamentRankingsRequestProto* defaultRetrieveTournamentRankingsRequestProtoInstance = nil;
+ (void) initialize {
  if (self == [RetrieveTournamentRankingsRequestProto class]) {
    defaultRetrieveTournamentRankingsRequestProtoInstance = [[RetrieveTournamentRankingsRequestProto alloc] init];
  }
}
+ (RetrieveTournamentRankingsRequestProto*) defaultInstance {
  return defaultRetrieveTournamentRankingsRequestProtoInstance;
}
- (RetrieveTournamentRankingsRequestProto*) defaultInstance {
  return defaultRetrieveTournamentRankingsRequestProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSender) {
    [output writeMessage:1 value:self.sender];
  }
  if (self.hasEventId) {
    [output writeInt32:2 value:self.eventId];
  }
  if (self.hasAfterThisRank) {
    [output writeInt32:3 value:self.afterThisRank];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSender) {
    size += computeMessageSize(1, self.sender);
  }
  if (self.hasEventId) {
    size += computeInt32Size(2, self.eventId);
  }
  if (self.hasAfterThisRank) {
    size += computeInt32Size(3, self.afterThisRank);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RetrieveTournamentRankingsRequestProto*) parseFromData:(NSData*) data {
  return (RetrieveTournamentRankingsRequestProto*)[[[RetrieveTournamentRankingsRequestProto builder] mergeFromData:data] build];
}
+ (RetrieveTournamentRankingsRequestProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RetrieveTournamentRankingsRequestProto*)[[[RetrieveTournamentRankingsRequestProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RetrieveTournamentRankingsRequestProto*) parseFromInputStream:(NSInputStream*) input {
  return (RetrieveTournamentRankingsRequestProto*)[[[RetrieveTournamentRankingsRequestProto builder] mergeFromInputStream:input] build];
}
+ (RetrieveTournamentRankingsRequestProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RetrieveTournamentRankingsRequestProto*)[[[RetrieveTournamentRankingsRequestProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RetrieveTournamentRankingsRequestProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RetrieveTournamentRankingsRequestProto*)[[[RetrieveTournamentRankingsRequestProto builder] mergeFromCodedInputStream:input] build];
}
+ (RetrieveTournamentRankingsRequestProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RetrieveTournamentRankingsRequestProto*)[[[RetrieveTournamentRankingsRequestProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RetrieveTournamentRankingsRequestProto_Builder*) builder {
  return [[[RetrieveTournamentRankingsRequestProto_Builder alloc] init] autorelease];
}
+ (RetrieveTournamentRankingsRequestProto_Builder*) builderWithPrototype:(RetrieveTournamentRankingsRequestProto*) prototype {
  return [[RetrieveTournamentRankingsRequestProto builder] mergeFrom:prototype];
}
- (RetrieveTournamentRankingsRequestProto_Builder*) builder {
  return [RetrieveTournamentRankingsRequestProto builder];
}
@end

@interface RetrieveTournamentRankingsRequestProto_Builder()
@property (retain) RetrieveTournamentRankingsRequestProto* result;
@end

@implementation RetrieveTournamentRankingsRequestProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RetrieveTournamentRankingsRequestProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RetrieveTournamentRankingsRequestProto_Builder*) clear {
  self.result = [[[RetrieveTournamentRankingsRequestProto alloc] init] autorelease];
  return self;
}
- (RetrieveTournamentRankingsRequestProto_Builder*) clone {
  return [RetrieveTournamentRankingsRequestProto builderWithPrototype:result];
}
- (RetrieveTournamentRankingsRequestProto*) defaultInstance {
  return [RetrieveTournamentRankingsRequestProto defaultInstance];
}
- (RetrieveTournamentRankingsRequestProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RetrieveTournamentRankingsRequestProto*) buildPartial {
  RetrieveTournamentRankingsRequestProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RetrieveTournamentRankingsRequestProto_Builder*) mergeFrom:(RetrieveTournamentRankingsRequestProto*) other {
  if (other == [RetrieveTournamentRankingsRequestProto defaultInstance]) {
    return self;
  }
  if (other.hasSender) {
    [self mergeSender:other.sender];
  }
  if (other.hasEventId) {
    [self setEventId:other.eventId];
  }
  if (other.hasAfterThisRank) {
    [self setAfterThisRank:other.afterThisRank];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RetrieveTournamentRankingsRequestProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RetrieveTournamentRankingsRequestProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MinimumUserProto_Builder* subBuilder = [MinimumUserProto builder];
        if (self.hasSender) {
          [subBuilder mergeFrom:self.sender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSender:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setEventId:[input readInt32]];
        break;
      }
      case 24: {
        [self setAfterThisRank:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSender {
  return result.hasSender;
}
- (MinimumUserProto*) sender {
  return result.sender;
}
- (RetrieveTournamentRankingsRequestProto_Builder*) setSender:(MinimumUserProto*) value {
  result.hasSender = YES;
  result.sender = value;
  return self;
}
- (RetrieveTournamentRankingsRequestProto_Builder*) setSenderBuilder:(MinimumUserProto_Builder*) builderForValue {
  return [self setSender:[builderForValue build]];
}
- (RetrieveTournamentRankingsRequestProto_Builder*) mergeSender:(MinimumUserProto*) value {
  if (result.hasSender &&
      result.sender != [MinimumUserProto defaultInstance]) {
    result.sender =
      [[[MinimumUserProto builderWithPrototype:result.sender] mergeFrom:value] buildPartial];
  } else {
    result.sender = value;
  }
  result.hasSender = YES;
  return self;
}
- (RetrieveTournamentRankingsRequestProto_Builder*) clearSender {
  result.hasSender = NO;
  result.sender = [MinimumUserProto defaultInstance];
  return self;
}
- (BOOL) hasEventId {
  return result.hasEventId;
}
- (int32_t) eventId {
  return result.eventId;
}
- (RetrieveTournamentRankingsRequestProto_Builder*) setEventId:(int32_t) value {
  result.hasEventId = YES;
  result.eventId = value;
  return self;
}
- (RetrieveTournamentRankingsRequestProto_Builder*) clearEventId {
  result.hasEventId = NO;
  result.eventId = 0;
  return self;
}
- (BOOL) hasAfterThisRank {
  return result.hasAfterThisRank;
}
- (int32_t) afterThisRank {
  return result.afterThisRank;
}
- (RetrieveTournamentRankingsRequestProto_Builder*) setAfterThisRank:(int32_t) value {
  result.hasAfterThisRank = YES;
  result.afterThisRank = value;
  return self;
}
- (RetrieveTournamentRankingsRequestProto_Builder*) clearAfterThisRank {
  result.hasAfterThisRank = NO;
  result.afterThisRank = 0;
  return self;
}
@end

@interface RetrieveTournamentRankingsResponseProto ()
@property (retain) MinimumUserProto* sender;
@property RetrieveTournamentRankingsResponseProto_RetrieveTournamentStatus status;
@property int32_t eventId;
@property int32_t afterThisRank;
@property (retain) MinimumUserProtoWithLevelForTournament* retriever;
@property (retain) NSMutableArray* mutableResultPlayersList;
@property (retain) NSMutableArray* mutableFullUsersList;
@end

@implementation RetrieveTournamentRankingsResponseProto

- (BOOL) hasSender {
  return !!hasSender_;
}
- (void) setHasSender:(BOOL) value {
  hasSender_ = !!value;
}
@synthesize sender;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasEventId {
  return !!hasEventId_;
}
- (void) setHasEventId:(BOOL) value {
  hasEventId_ = !!value;
}
@synthesize eventId;
- (BOOL) hasAfterThisRank {
  return !!hasAfterThisRank_;
}
- (void) setHasAfterThisRank:(BOOL) value {
  hasAfterThisRank_ = !!value;
}
@synthesize afterThisRank;
- (BOOL) hasRetriever {
  return !!hasRetriever_;
}
- (void) setHasRetriever:(BOOL) value {
  hasRetriever_ = !!value;
}
@synthesize retriever;
@synthesize mutableResultPlayersList;
@synthesize mutableFullUsersList;
- (void) dealloc {
  self.sender = nil;
  self.retriever = nil;
  self.mutableResultPlayersList = nil;
  self.mutableFullUsersList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.sender = [MinimumUserProto defaultInstance];
    self.status = RetrieveTournamentRankingsResponseProto_RetrieveTournamentStatusSuccess;
    self.eventId = 0;
    self.afterThisRank = 0;
    self.retriever = [MinimumUserProtoWithLevelForTournament defaultInstance];
  }
  return self;
}
static RetrieveTournamentRankingsResponseProto* defaultRetrieveTournamentRankingsResponseProtoInstance = nil;
+ (void) initialize {
  if (self == [RetrieveTournamentRankingsResponseProto class]) {
    defaultRetrieveTournamentRankingsResponseProtoInstance = [[RetrieveTournamentRankingsResponseProto alloc] init];
  }
}
+ (RetrieveTournamentRankingsResponseProto*) defaultInstance {
  return defaultRetrieveTournamentRankingsResponseProtoInstance;
}
- (RetrieveTournamentRankingsResponseProto*) defaultInstance {
  return defaultRetrieveTournamentRankingsResponseProtoInstance;
}
- (NSArray*) resultPlayersList {
  return mutableResultPlayersList;
}
- (MinimumUserProtoWithLevelForTournament*) resultPlayersAtIndex:(int32_t) index {
  id value = [mutableResultPlayersList objectAtIndex:index];
  return value;
}
- (NSArray*) fullUsersList {
  return mutableFullUsersList;
}
- (FullUserProto*) fullUsersAtIndex:(int32_t) index {
  id value = [mutableFullUsersList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSender) {
    [output writeMessage:1 value:self.sender];
  }
  if (self.hasStatus) {
    [output writeEnum:2 value:self.status];
  }
  if (self.hasEventId) {
    [output writeInt32:3 value:self.eventId];
  }
  if (self.hasAfterThisRank) {
    [output writeInt32:4 value:self.afterThisRank];
  }
  if (self.hasRetriever) {
    [output writeMessage:5 value:self.retriever];
  }
  for (MinimumUserProtoWithLevelForTournament* element in self.resultPlayersList) {
    [output writeMessage:6 value:element];
  }
  for (FullUserProto* element in self.fullUsersList) {
    [output writeMessage:7 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSender) {
    size += computeMessageSize(1, self.sender);
  }
  if (self.hasStatus) {
    size += computeEnumSize(2, self.status);
  }
  if (self.hasEventId) {
    size += computeInt32Size(3, self.eventId);
  }
  if (self.hasAfterThisRank) {
    size += computeInt32Size(4, self.afterThisRank);
  }
  if (self.hasRetriever) {
    size += computeMessageSize(5, self.retriever);
  }
  for (MinimumUserProtoWithLevelForTournament* element in self.resultPlayersList) {
    size += computeMessageSize(6, element);
  }
  for (FullUserProto* element in self.fullUsersList) {
    size += computeMessageSize(7, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RetrieveTournamentRankingsResponseProto*) parseFromData:(NSData*) data {
  return (RetrieveTournamentRankingsResponseProto*)[[[RetrieveTournamentRankingsResponseProto builder] mergeFromData:data] build];
}
+ (RetrieveTournamentRankingsResponseProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RetrieveTournamentRankingsResponseProto*)[[[RetrieveTournamentRankingsResponseProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RetrieveTournamentRankingsResponseProto*) parseFromInputStream:(NSInputStream*) input {
  return (RetrieveTournamentRankingsResponseProto*)[[[RetrieveTournamentRankingsResponseProto builder] mergeFromInputStream:input] build];
}
+ (RetrieveTournamentRankingsResponseProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RetrieveTournamentRankingsResponseProto*)[[[RetrieveTournamentRankingsResponseProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RetrieveTournamentRankingsResponseProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RetrieveTournamentRankingsResponseProto*)[[[RetrieveTournamentRankingsResponseProto builder] mergeFromCodedInputStream:input] build];
}
+ (RetrieveTournamentRankingsResponseProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RetrieveTournamentRankingsResponseProto*)[[[RetrieveTournamentRankingsResponseProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RetrieveTournamentRankingsResponseProto_Builder*) builder {
  return [[[RetrieveTournamentRankingsResponseProto_Builder alloc] init] autorelease];
}
+ (RetrieveTournamentRankingsResponseProto_Builder*) builderWithPrototype:(RetrieveTournamentRankingsResponseProto*) prototype {
  return [[RetrieveTournamentRankingsResponseProto builder] mergeFrom:prototype];
}
- (RetrieveTournamentRankingsResponseProto_Builder*) builder {
  return [RetrieveTournamentRankingsResponseProto builder];
}
@end

BOOL RetrieveTournamentRankingsResponseProto_RetrieveTournamentStatusIsValidValue(RetrieveTournamentRankingsResponseProto_RetrieveTournamentStatus value) {
  switch (value) {
    case RetrieveTournamentRankingsResponseProto_RetrieveTournamentStatusSuccess:
    case RetrieveTournamentRankingsResponseProto_RetrieveTournamentStatusOtherFail:
      return YES;
    default:
      return NO;
  }
}
@interface RetrieveTournamentRankingsResponseProto_Builder()
@property (retain) RetrieveTournamentRankingsResponseProto* result;
@end

@implementation RetrieveTournamentRankingsResponseProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RetrieveTournamentRankingsResponseProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) clear {
  self.result = [[[RetrieveTournamentRankingsResponseProto alloc] init] autorelease];
  return self;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) clone {
  return [RetrieveTournamentRankingsResponseProto builderWithPrototype:result];
}
- (RetrieveTournamentRankingsResponseProto*) defaultInstance {
  return [RetrieveTournamentRankingsResponseProto defaultInstance];
}
- (RetrieveTournamentRankingsResponseProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RetrieveTournamentRankingsResponseProto*) buildPartial {
  RetrieveTournamentRankingsResponseProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) mergeFrom:(RetrieveTournamentRankingsResponseProto*) other {
  if (other == [RetrieveTournamentRankingsResponseProto defaultInstance]) {
    return self;
  }
  if (other.hasSender) {
    [self mergeSender:other.sender];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasEventId) {
    [self setEventId:other.eventId];
  }
  if (other.hasAfterThisRank) {
    [self setAfterThisRank:other.afterThisRank];
  }
  if (other.hasRetriever) {
    [self mergeRetriever:other.retriever];
  }
  if (other.mutableResultPlayersList.count > 0) {
    if (result.mutableResultPlayersList == nil) {
      result.mutableResultPlayersList = [NSMutableArray array];
    }
    [result.mutableResultPlayersList addObjectsFromArray:other.mutableResultPlayersList];
  }
  if (other.mutableFullUsersList.count > 0) {
    if (result.mutableFullUsersList == nil) {
      result.mutableFullUsersList = [NSMutableArray array];
    }
    [result.mutableFullUsersList addObjectsFromArray:other.mutableFullUsersList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RetrieveTournamentRankingsResponseProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MinimumUserProto_Builder* subBuilder = [MinimumUserProto builder];
        if (self.hasSender) {
          [subBuilder mergeFrom:self.sender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSender:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (RetrieveTournamentRankingsResponseProto_RetrieveTournamentStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setEventId:[input readInt32]];
        break;
      }
      case 32: {
        [self setAfterThisRank:[input readInt32]];
        break;
      }
      case 42: {
        MinimumUserProtoWithLevelForTournament_Builder* subBuilder = [MinimumUserProtoWithLevelForTournament builder];
        if (self.hasRetriever) {
          [subBuilder mergeFrom:self.retriever];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRetriever:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        MinimumUserProtoWithLevelForTournament_Builder* subBuilder = [MinimumUserProtoWithLevelForTournament builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addResultPlayers:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        FullUserProto_Builder* subBuilder = [FullUserProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFullUsers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSender {
  return result.hasSender;
}
- (MinimumUserProto*) sender {
  return result.sender;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) setSender:(MinimumUserProto*) value {
  result.hasSender = YES;
  result.sender = value;
  return self;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) setSenderBuilder:(MinimumUserProto_Builder*) builderForValue {
  return [self setSender:[builderForValue build]];
}
- (RetrieveTournamentRankingsResponseProto_Builder*) mergeSender:(MinimumUserProto*) value {
  if (result.hasSender &&
      result.sender != [MinimumUserProto defaultInstance]) {
    result.sender =
      [[[MinimumUserProto builderWithPrototype:result.sender] mergeFrom:value] buildPartial];
  } else {
    result.sender = value;
  }
  result.hasSender = YES;
  return self;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) clearSender {
  result.hasSender = NO;
  result.sender = [MinimumUserProto defaultInstance];
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (RetrieveTournamentRankingsResponseProto_RetrieveTournamentStatus) status {
  return result.status;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) setStatus:(RetrieveTournamentRankingsResponseProto_RetrieveTournamentStatus) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = RetrieveTournamentRankingsResponseProto_RetrieveTournamentStatusSuccess;
  return self;
}
- (BOOL) hasEventId {
  return result.hasEventId;
}
- (int32_t) eventId {
  return result.eventId;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) setEventId:(int32_t) value {
  result.hasEventId = YES;
  result.eventId = value;
  return self;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) clearEventId {
  result.hasEventId = NO;
  result.eventId = 0;
  return self;
}
- (BOOL) hasAfterThisRank {
  return result.hasAfterThisRank;
}
- (int32_t) afterThisRank {
  return result.afterThisRank;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) setAfterThisRank:(int32_t) value {
  result.hasAfterThisRank = YES;
  result.afterThisRank = value;
  return self;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) clearAfterThisRank {
  result.hasAfterThisRank = NO;
  result.afterThisRank = 0;
  return self;
}
- (BOOL) hasRetriever {
  return result.hasRetriever;
}
- (MinimumUserProtoWithLevelForTournament*) retriever {
  return result.retriever;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) setRetriever:(MinimumUserProtoWithLevelForTournament*) value {
  result.hasRetriever = YES;
  result.retriever = value;
  return self;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) setRetrieverBuilder:(MinimumUserProtoWithLevelForTournament_Builder*) builderForValue {
  return [self setRetriever:[builderForValue build]];
}
- (RetrieveTournamentRankingsResponseProto_Builder*) mergeRetriever:(MinimumUserProtoWithLevelForTournament*) value {
  if (result.hasRetriever &&
      result.retriever != [MinimumUserProtoWithLevelForTournament defaultInstance]) {
    result.retriever =
      [[[MinimumUserProtoWithLevelForTournament builderWithPrototype:result.retriever] mergeFrom:value] buildPartial];
  } else {
    result.retriever = value;
  }
  result.hasRetriever = YES;
  return self;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) clearRetriever {
  result.hasRetriever = NO;
  result.retriever = [MinimumUserProtoWithLevelForTournament defaultInstance];
  return self;
}
- (NSArray*) resultPlayersList {
  if (result.mutableResultPlayersList == nil) { return [NSArray array]; }
  return result.mutableResultPlayersList;
}
- (MinimumUserProtoWithLevelForTournament*) resultPlayersAtIndex:(int32_t) index {
  return [result resultPlayersAtIndex:index];
}
- (RetrieveTournamentRankingsResponseProto_Builder*) replaceResultPlayersAtIndex:(int32_t) index with:(MinimumUserProtoWithLevelForTournament*) value {
  [result.mutableResultPlayersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) addAllResultPlayers:(NSArray*) values {
  if (result.mutableResultPlayersList == nil) {
    result.mutableResultPlayersList = [NSMutableArray array];
  }
  [result.mutableResultPlayersList addObjectsFromArray:values];
  return self;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) clearResultPlayersList {
  result.mutableResultPlayersList = nil;
  return self;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) addResultPlayers:(MinimumUserProtoWithLevelForTournament*) value {
  if (result.mutableResultPlayersList == nil) {
    result.mutableResultPlayersList = [NSMutableArray array];
  }
  [result.mutableResultPlayersList addObject:value];
  return self;
}
- (NSArray*) fullUsersList {
  if (result.mutableFullUsersList == nil) { return [NSArray array]; }
  return result.mutableFullUsersList;
}
- (FullUserProto*) fullUsersAtIndex:(int32_t) index {
  return [result fullUsersAtIndex:index];
}
- (RetrieveTournamentRankingsResponseProto_Builder*) replaceFullUsersAtIndex:(int32_t) index with:(FullUserProto*) value {
  [result.mutableFullUsersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) addAllFullUsers:(NSArray*) values {
  if (result.mutableFullUsersList == nil) {
    result.mutableFullUsersList = [NSMutableArray array];
  }
  [result.mutableFullUsersList addObjectsFromArray:values];
  return self;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) clearFullUsersList {
  result.mutableFullUsersList = nil;
  return self;
}
- (RetrieveTournamentRankingsResponseProto_Builder*) addFullUsers:(FullUserProto*) value {
  if (result.mutableFullUsersList == nil) {
    result.mutableFullUsersList = [NSMutableArray array];
  }
  [result.mutableFullUsersList addObject:value];
  return self;
}
@end

