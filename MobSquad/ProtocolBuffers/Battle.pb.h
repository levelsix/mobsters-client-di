// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ProtocolBuffers.h"

#import "MonsterStuff.pb.h"
#import "User.pb.h"

@class FullUserMonsterProto;
@class FullUserMonsterProto_Builder;
@class FullUserProto;
@class FullUserProto_Builder;
@class MinimumClanProto;
@class MinimumClanProto_Builder;
@class MinimumUserMonsterProto;
@class MinimumUserMonsterProto_Builder;
@class MinimumUserMonsterSellProto;
@class MinimumUserMonsterSellProto_Builder;
@class MinimumUserProto;
@class MinimumUserProtoWithFacebookId;
@class MinimumUserProtoWithFacebookId_Builder;
@class MinimumUserProtoWithLevel;
@class MinimumUserProtoWithLevel_Builder;
@class MinimumUserProtoWithMaxResources;
@class MinimumUserProtoWithMaxResources_Builder;
@class MinimumUserProto_Builder;
@class MonsterBattleDialogueProto;
@class MonsterBattleDialogueProto_Builder;
@class MonsterLevelInfoProto;
@class MonsterLevelInfoProto_Builder;
@class MonsterProto;
@class MonsterProto_Builder;
@class PvpHistoryProto;
@class PvpHistoryProto_Builder;
@class PvpLeagueProto;
@class PvpLeagueProto_Builder;
@class PvpProto;
@class PvpProto_Builder;
@class StaticUserLevelInfoProto;
@class StaticUserLevelInfoProto_Builder;
@class UserCurrentMonsterTeamProto;
@class UserCurrentMonsterTeamProto_Builder;
@class UserEnhancementItemProto;
@class UserEnhancementItemProto_Builder;
@class UserEnhancementProto;
@class UserEnhancementProto_Builder;
@class UserFacebookInviteForSlotProto;
@class UserFacebookInviteForSlotProto_Builder;
@class UserMonsterCurrentExpProto;
@class UserMonsterCurrentExpProto_Builder;
@class UserMonsterCurrentHealthProto;
@class UserMonsterCurrentHealthProto_Builder;
@class UserMonsterEvolutionProto;
@class UserMonsterEvolutionProto_Builder;
@class UserMonsterHealingProto;
@class UserMonsterHealingProto_Builder;
@class UserPvpLeagueProto;
@class UserPvpLeagueProto_Builder;
typedef enum {
  BattleResultAttackerWin = 1,
  BattleResultDefenderWin = 2,
  BattleResultAttackerFlee = 3,
} BattleResult;

BOOL BattleResultIsValidValue(BattleResult value);


@interface BattleRoot : NSObject {
}
+ (PBExtensionRegistry*) extensionRegistry;
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry;
@end

@interface PvpProto : PBGeneratedMessage {
@private
  BOOL hasProspectiveCashWinnings_:1;
  BOOL hasProspectiveOilWinnings_:1;
  BOOL hasDefender_:1;
  BOOL hasPvpLeagueStats_:1;
  int32_t prospectiveCashWinnings;
  int32_t prospectiveOilWinnings;
  MinimumUserProtoWithLevel* defender;
  UserPvpLeagueProto* pvpLeagueStats;
  NSMutableArray* mutableDefenderMonstersList;
}
- (BOOL) hasDefender;
- (BOOL) hasProspectiveCashWinnings;
- (BOOL) hasProspectiveOilWinnings;
- (BOOL) hasPvpLeagueStats;
@property (readonly, retain) MinimumUserProtoWithLevel* defender;
@property (readonly) int32_t prospectiveCashWinnings;
@property (readonly) int32_t prospectiveOilWinnings;
@property (readonly, retain) UserPvpLeagueProto* pvpLeagueStats;
- (NSArray*) defenderMonstersList;
- (MinimumUserMonsterProto*) defenderMonstersAtIndex:(int32_t) index;

+ (PvpProto*) defaultInstance;
- (PvpProto*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (PvpProto_Builder*) builder;
+ (PvpProto_Builder*) builder;
+ (PvpProto_Builder*) builderWithPrototype:(PvpProto*) prototype;

+ (PvpProto*) parseFromData:(NSData*) data;
+ (PvpProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PvpProto*) parseFromInputStream:(NSInputStream*) input;
+ (PvpProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PvpProto*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (PvpProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface PvpProto_Builder : PBGeneratedMessage_Builder {
@private
  PvpProto* result;
}

- (PvpProto*) defaultInstance;

- (PvpProto_Builder*) clear;
- (PvpProto_Builder*) clone;

- (PvpProto*) build;
- (PvpProto*) buildPartial;

- (PvpProto_Builder*) mergeFrom:(PvpProto*) other;
- (PvpProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (PvpProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasDefender;
- (MinimumUserProtoWithLevel*) defender;
- (PvpProto_Builder*) setDefender:(MinimumUserProtoWithLevel*) value;
- (PvpProto_Builder*) setDefenderBuilder:(MinimumUserProtoWithLevel_Builder*) builderForValue;
- (PvpProto_Builder*) mergeDefender:(MinimumUserProtoWithLevel*) value;
- (PvpProto_Builder*) clearDefender;

- (NSArray*) defenderMonstersList;
- (MinimumUserMonsterProto*) defenderMonstersAtIndex:(int32_t) index;
- (PvpProto_Builder*) replaceDefenderMonstersAtIndex:(int32_t) index with:(MinimumUserMonsterProto*) value;
- (PvpProto_Builder*) addDefenderMonsters:(MinimumUserMonsterProto*) value;
- (PvpProto_Builder*) addAllDefenderMonsters:(NSArray*) values;
- (PvpProto_Builder*) clearDefenderMonstersList;

- (BOOL) hasProspectiveCashWinnings;
- (int32_t) prospectiveCashWinnings;
- (PvpProto_Builder*) setProspectiveCashWinnings:(int32_t) value;
- (PvpProto_Builder*) clearProspectiveCashWinnings;

- (BOOL) hasProspectiveOilWinnings;
- (int32_t) prospectiveOilWinnings;
- (PvpProto_Builder*) setProspectiveOilWinnings:(int32_t) value;
- (PvpProto_Builder*) clearProspectiveOilWinnings;

- (BOOL) hasPvpLeagueStats;
- (UserPvpLeagueProto*) pvpLeagueStats;
- (PvpProto_Builder*) setPvpLeagueStats:(UserPvpLeagueProto*) value;
- (PvpProto_Builder*) setPvpLeagueStatsBuilder:(UserPvpLeagueProto_Builder*) builderForValue;
- (PvpProto_Builder*) mergePvpLeagueStats:(UserPvpLeagueProto*) value;
- (PvpProto_Builder*) clearPvpLeagueStats;
@end

@interface PvpHistoryProto : PBGeneratedMessage {
@private
  BOOL hasAttackerWon_:1;
  BOOL hasExactedRevenge_:1;
  BOOL hasBattleEndTime_:1;
  BOOL hasProspectiveCashWinnings_:1;
  BOOL hasProspectiveOilWinnings_:1;
  BOOL hasAttacker_:1;
  BOOL hasAttackerBefore_:1;
  BOOL hasAttackerAfter_:1;
  BOOL hasDefenderBefore_:1;
  BOOL hasDefenderAfter_:1;
  BOOL hasDefenderCashChange_:1;
  BOOL hasDefenderOilChange_:1;
  BOOL attackerWon_:1;
  BOOL exactedRevenge_:1;
  int64_t battleEndTime;
  int32_t prospectiveCashWinnings;
  int32_t prospectiveOilWinnings;
  FullUserProto* attacker;
  UserPvpLeagueProto* attackerBefore;
  UserPvpLeagueProto* attackerAfter;
  UserPvpLeagueProto* defenderBefore;
  UserPvpLeagueProto* defenderAfter;
  int32_t defenderCashChange;
  int32_t defenderOilChange;
  NSMutableArray* mutableAttackersMonstersList;
}
- (BOOL) hasBattleEndTime;
- (BOOL) hasAttacker;
- (BOOL) hasAttackerWon;
- (BOOL) hasDefenderCashChange;
- (BOOL) hasDefenderOilChange;
- (BOOL) hasExactedRevenge;
- (BOOL) hasProspectiveCashWinnings;
- (BOOL) hasProspectiveOilWinnings;
- (BOOL) hasAttackerBefore;
- (BOOL) hasAttackerAfter;
- (BOOL) hasDefenderBefore;
- (BOOL) hasDefenderAfter;
@property (readonly) int64_t battleEndTime;
@property (readonly, retain) FullUserProto* attacker;
- (BOOL) attackerWon;
@property (readonly) int32_t defenderCashChange;
@property (readonly) int32_t defenderOilChange;
- (BOOL) exactedRevenge;
@property (readonly) int32_t prospectiveCashWinnings;
@property (readonly) int32_t prospectiveOilWinnings;
@property (readonly, retain) UserPvpLeagueProto* attackerBefore;
@property (readonly, retain) UserPvpLeagueProto* attackerAfter;
@property (readonly, retain) UserPvpLeagueProto* defenderBefore;
@property (readonly, retain) UserPvpLeagueProto* defenderAfter;
- (NSArray*) attackersMonstersList;
- (MinimumUserMonsterProto*) attackersMonstersAtIndex:(int32_t) index;

+ (PvpHistoryProto*) defaultInstance;
- (PvpHistoryProto*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (PvpHistoryProto_Builder*) builder;
+ (PvpHistoryProto_Builder*) builder;
+ (PvpHistoryProto_Builder*) builderWithPrototype:(PvpHistoryProto*) prototype;

+ (PvpHistoryProto*) parseFromData:(NSData*) data;
+ (PvpHistoryProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PvpHistoryProto*) parseFromInputStream:(NSInputStream*) input;
+ (PvpHistoryProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PvpHistoryProto*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (PvpHistoryProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface PvpHistoryProto_Builder : PBGeneratedMessage_Builder {
@private
  PvpHistoryProto* result;
}

- (PvpHistoryProto*) defaultInstance;

- (PvpHistoryProto_Builder*) clear;
- (PvpHistoryProto_Builder*) clone;

- (PvpHistoryProto*) build;
- (PvpHistoryProto*) buildPartial;

- (PvpHistoryProto_Builder*) mergeFrom:(PvpHistoryProto*) other;
- (PvpHistoryProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (PvpHistoryProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasBattleEndTime;
- (int64_t) battleEndTime;
- (PvpHistoryProto_Builder*) setBattleEndTime:(int64_t) value;
- (PvpHistoryProto_Builder*) clearBattleEndTime;

- (BOOL) hasAttacker;
- (FullUserProto*) attacker;
- (PvpHistoryProto_Builder*) setAttacker:(FullUserProto*) value;
- (PvpHistoryProto_Builder*) setAttackerBuilder:(FullUserProto_Builder*) builderForValue;
- (PvpHistoryProto_Builder*) mergeAttacker:(FullUserProto*) value;
- (PvpHistoryProto_Builder*) clearAttacker;

- (NSArray*) attackersMonstersList;
- (MinimumUserMonsterProto*) attackersMonstersAtIndex:(int32_t) index;
- (PvpHistoryProto_Builder*) replaceAttackersMonstersAtIndex:(int32_t) index with:(MinimumUserMonsterProto*) value;
- (PvpHistoryProto_Builder*) addAttackersMonsters:(MinimumUserMonsterProto*) value;
- (PvpHistoryProto_Builder*) addAllAttackersMonsters:(NSArray*) values;
- (PvpHistoryProto_Builder*) clearAttackersMonstersList;

- (BOOL) hasAttackerWon;
- (BOOL) attackerWon;
- (PvpHistoryProto_Builder*) setAttackerWon:(BOOL) value;
- (PvpHistoryProto_Builder*) clearAttackerWon;

- (BOOL) hasDefenderCashChange;
- (int32_t) defenderCashChange;
- (PvpHistoryProto_Builder*) setDefenderCashChange:(int32_t) value;
- (PvpHistoryProto_Builder*) clearDefenderCashChange;

- (BOOL) hasDefenderOilChange;
- (int32_t) defenderOilChange;
- (PvpHistoryProto_Builder*) setDefenderOilChange:(int32_t) value;
- (PvpHistoryProto_Builder*) clearDefenderOilChange;

- (BOOL) hasExactedRevenge;
- (BOOL) exactedRevenge;
- (PvpHistoryProto_Builder*) setExactedRevenge:(BOOL) value;
- (PvpHistoryProto_Builder*) clearExactedRevenge;

- (BOOL) hasProspectiveCashWinnings;
- (int32_t) prospectiveCashWinnings;
- (PvpHistoryProto_Builder*) setProspectiveCashWinnings:(int32_t) value;
- (PvpHistoryProto_Builder*) clearProspectiveCashWinnings;

- (BOOL) hasProspectiveOilWinnings;
- (int32_t) prospectiveOilWinnings;
- (PvpHistoryProto_Builder*) setProspectiveOilWinnings:(int32_t) value;
- (PvpHistoryProto_Builder*) clearProspectiveOilWinnings;

- (BOOL) hasAttackerBefore;
- (UserPvpLeagueProto*) attackerBefore;
- (PvpHistoryProto_Builder*) setAttackerBefore:(UserPvpLeagueProto*) value;
- (PvpHistoryProto_Builder*) setAttackerBeforeBuilder:(UserPvpLeagueProto_Builder*) builderForValue;
- (PvpHistoryProto_Builder*) mergeAttackerBefore:(UserPvpLeagueProto*) value;
- (PvpHistoryProto_Builder*) clearAttackerBefore;

- (BOOL) hasAttackerAfter;
- (UserPvpLeagueProto*) attackerAfter;
- (PvpHistoryProto_Builder*) setAttackerAfter:(UserPvpLeagueProto*) value;
- (PvpHistoryProto_Builder*) setAttackerAfterBuilder:(UserPvpLeagueProto_Builder*) builderForValue;
- (PvpHistoryProto_Builder*) mergeAttackerAfter:(UserPvpLeagueProto*) value;
- (PvpHistoryProto_Builder*) clearAttackerAfter;

- (BOOL) hasDefenderBefore;
- (UserPvpLeagueProto*) defenderBefore;
- (PvpHistoryProto_Builder*) setDefenderBefore:(UserPvpLeagueProto*) value;
- (PvpHistoryProto_Builder*) setDefenderBeforeBuilder:(UserPvpLeagueProto_Builder*) builderForValue;
- (PvpHistoryProto_Builder*) mergeDefenderBefore:(UserPvpLeagueProto*) value;
- (PvpHistoryProto_Builder*) clearDefenderBefore;

- (BOOL) hasDefenderAfter;
- (UserPvpLeagueProto*) defenderAfter;
- (PvpHistoryProto_Builder*) setDefenderAfter:(UserPvpLeagueProto*) value;
- (PvpHistoryProto_Builder*) setDefenderAfterBuilder:(UserPvpLeagueProto_Builder*) builderForValue;
- (PvpHistoryProto_Builder*) mergeDefenderAfter:(UserPvpLeagueProto*) value;
- (PvpHistoryProto_Builder*) clearDefenderAfter;
@end

@interface PvpLeagueProto : PBGeneratedMessage {
@private
  BOOL hasLeagueId_:1;
  BOOL hasNumRanks_:1;
  BOOL hasMinElo_:1;
  BOOL hasMaxElo_:1;
  BOOL hasLeagueName_:1;
  BOOL hasImgPrefix_:1;
  BOOL hasDescription_:1;
  int32_t leagueId;
  int32_t numRanks;
  int32_t minElo;
  int32_t maxElo;
  NSString* leagueName;
  NSString* imgPrefix;
  NSString* description;
}
- (BOOL) hasLeagueId;
- (BOOL) hasLeagueName;
- (BOOL) hasImgPrefix;
- (BOOL) hasNumRanks;
- (BOOL) hasDescription;
- (BOOL) hasMinElo;
- (BOOL) hasMaxElo;
@property (readonly) int32_t leagueId;
@property (readonly, retain) NSString* leagueName;
@property (readonly, retain) NSString* imgPrefix;
@property (readonly) int32_t numRanks;
@property (readonly, retain) NSString* description;
@property (readonly) int32_t minElo;
@property (readonly) int32_t maxElo;

+ (PvpLeagueProto*) defaultInstance;
- (PvpLeagueProto*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (PvpLeagueProto_Builder*) builder;
+ (PvpLeagueProto_Builder*) builder;
+ (PvpLeagueProto_Builder*) builderWithPrototype:(PvpLeagueProto*) prototype;

+ (PvpLeagueProto*) parseFromData:(NSData*) data;
+ (PvpLeagueProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PvpLeagueProto*) parseFromInputStream:(NSInputStream*) input;
+ (PvpLeagueProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PvpLeagueProto*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (PvpLeagueProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface PvpLeagueProto_Builder : PBGeneratedMessage_Builder {
@private
  PvpLeagueProto* result;
}

- (PvpLeagueProto*) defaultInstance;

- (PvpLeagueProto_Builder*) clear;
- (PvpLeagueProto_Builder*) clone;

- (PvpLeagueProto*) build;
- (PvpLeagueProto*) buildPartial;

- (PvpLeagueProto_Builder*) mergeFrom:(PvpLeagueProto*) other;
- (PvpLeagueProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (PvpLeagueProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasLeagueId;
- (int32_t) leagueId;
- (PvpLeagueProto_Builder*) setLeagueId:(int32_t) value;
- (PvpLeagueProto_Builder*) clearLeagueId;

- (BOOL) hasLeagueName;
- (NSString*) leagueName;
- (PvpLeagueProto_Builder*) setLeagueName:(NSString*) value;
- (PvpLeagueProto_Builder*) clearLeagueName;

- (BOOL) hasImgPrefix;
- (NSString*) imgPrefix;
- (PvpLeagueProto_Builder*) setImgPrefix:(NSString*) value;
- (PvpLeagueProto_Builder*) clearImgPrefix;

- (BOOL) hasNumRanks;
- (int32_t) numRanks;
- (PvpLeagueProto_Builder*) setNumRanks:(int32_t) value;
- (PvpLeagueProto_Builder*) clearNumRanks;

- (BOOL) hasDescription;
- (NSString*) description;
- (PvpLeagueProto_Builder*) setDescription:(NSString*) value;
- (PvpLeagueProto_Builder*) clearDescription;

- (BOOL) hasMinElo;
- (int32_t) minElo;
- (PvpLeagueProto_Builder*) setMinElo:(int32_t) value;
- (PvpLeagueProto_Builder*) clearMinElo;

- (BOOL) hasMaxElo;
- (int32_t) maxElo;
- (PvpLeagueProto_Builder*) setMaxElo:(int32_t) value;
- (PvpLeagueProto_Builder*) clearMaxElo;
@end

